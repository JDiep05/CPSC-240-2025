     1                                  ; Declaration
     2                                  extern getqwords
     3                                  extern printf
     4                                  extern scanf
     5                                  
     6                                  global manager
     7                                  
     8                                  section .data
     9 00000000 EFFFFFFFFFFFFFFF        number dq -17
    10 00000008 0A5468652061646472-     Address db 10, "The address of -17 is %lx", 10, 0
    10 00000011 657373206F66202D31-
    10 0000001A 3720697320256C780A-
    10 00000023 00                 
    11 00000024 0A506C656173652065-     Input   db 10, "Please enter an address in hex: ", 0
    11 0000002D 6E74657220616E2061-
    11 00000036 64647265737320696E-
    11 0000003F 206865783A2000     
    12 00000046 256C7800                Scan    db "%lx", 0
    13 0000004A 0A54686520696E7465-     Result  db 10, "The integer at that address is 0x%016lX", 10, 0
    13 00000053 676572206174207468-
    13 0000005C 617420616464726573-
    13 00000065 732069732030782530-
    13 0000006E 31366C580A00       
    14 00000074 0A46756E6374696F6E-     Done    db 10, "Function getqword has finished. A number will be returned to the driver.", 10, 0
    14 0000007D 2067657471776F7264-
    14 00000086 206861732066696E69-
    14 0000008F 736865642E2041206E-
    14 00000098 756D6265722077696C-
    14 000000A1 6C2062652072657475-
    14 000000AA 726E656420746F2074-
    14 000000B3 686520647269766572-
    14 000000BC 2E0A00             
    15                                  
    16                                  section .bss
    17 00000000 <res 00000008>          user_addr resq 1
    18                                  
    19                                  section .text
    20                                  manager:
    21 00000000 55                      push rbp
    22 00000001 4889E5                  mov rbp, rsp
    23 00000004 53                      push rbx
    24 00000005 51                      push rcx
    25 00000006 52                      push rdx
    26 00000007 57                      push rdi
    27 00000008 56                      push rsi
    28 00000009 4150                    push r8
    29 0000000B 4151                    push r9
    30 0000000D 4152                    push r10
    31 0000000F 4153                    push r11
    32 00000011 4154                    push r12
    33 00000013 4155                    push r13
    34 00000015 4156                    push r14
    35 00000017 4157                    push r15
    36 00000019 9C                      pushf
    37                                  
    38                                  ; Print address of number
    39 0000001A B800000000              mov rax, 0
    40 0000001F 48BF-                   mov rdi, Address        ; format string
    40 00000021 [0800000000000000] 
    41 00000029 48BE-                   mov rsi, number         ; value to print
    41 0000002B [0000000000000000] 
    42 00000033 E8(00000000)            call printf
    43                                  
    44                                  ; Prompt user for address
    45 00000038 B800000000              mov rax, 0
    46 0000003D 48BF-                   mov rdi, Input
    46 0000003F [2400000000000000] 
    47 00000047 E8(00000000)            call printf
    48                                  
    49                                  ; Read user input into user_addr
    50 0000004C B800000000              mov rax, 0
    51 00000051 48BF-                   mov rdi, Scan
    51 00000053 [4600000000000000] 
    52 0000005B 48BE-                   mov rsi, user_addr
    52 0000005D [0000000000000000] 
    53 00000065 E8(00000000)            call scanf
    54                                  
    55                                  ; Dereference user input and call getqwords
    56 0000006A 488B3C25[00000000]      mov rdi, [user_addr]     ; rdi = address user typed in
    57 00000072 E8(00000000)            call getqwords           ; result in rax
    58                                  
    59 00000077 4889C3                  mov rbx, rax             ; store result
    60                                  
    61                                  ; Print value at address
    62 0000007A B800000000              mov rax, 0
    63 0000007F 48BF-                   mov rdi, Result
    63 00000081 [4A00000000000000] 
    64 00000089 4889DE                  mov rsi, rbx
    65 0000008C E8(00000000)            call printf
    66                                  
    67                                  ; Print done message
    68 00000091 B800000000              mov rax, 0
    69 00000096 48BF-                   mov rdi, Done
    69 00000098 [7400000000000000] 
    70 000000A0 E8(00000000)            call printf
    71                                  
    72                                  ; Return result in rax
    73 000000A5 4889D8                  mov rax, rbx
    74                                  
    75 000000A8 9D                      popf
    76 000000A9 415F                    pop r15
    77 000000AB 415E                    pop r14
    78 000000AD 415D                    pop r13
    79 000000AF 415C                    pop r12
    80 000000B1 415B                    pop r11
    81 000000B3 415A                    pop r10
    82 000000B5 4159                    pop r9
    83 000000B7 4158                    pop r8
    84 000000B9 5E                      pop rsi
    85 000000BA 5F                      pop rdi
    86 000000BB 5A                      pop rdx
    87 000000BC 59                      pop rcx
    88 000000BD 5B                      pop rbx
    89 000000BE 5D                      pop rbp
    90 000000BF C3                      ret
