     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "isfloat".  This a library function contained in a single file.  The function receives a null-terminated     *
     3                                  ;array of char and either verifies that the array can be converted to a 64-bit float or denies that such a conversion is    *
     4                                  ;possible.  Copyright (C) 2022 Floyd Holliday.                                                                              *
     5                                  ;                                                                                                                           *
     6                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public   *
     7                                  ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be   *
     8                                  ;useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.*
     9                                  ;See the GNU Lesser General Public License for more details. A copy of the GNU General Public License v3 is available here: *
    10                                  ;<https:;www.gnu.org/licenses/>.                            *
    11                                  ;****************************************************************************************************************************
    12                                  ;
    13                                  ;
    14                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    15                                  ;Author information
    16                                  ;  Author name: Floyd Holliday
    17                                  ;  Author email: holliday@fullerton.edu
    18                                  ;  Author phone (wired phone in CS building): (657)278-7021
    19                                  ;
    20                                  ;Status
    21                                  ;  This software is not an application program, but rather it is a single function licensed for use by other applications.
    22                                  ;  This function can be embedded within both FOSS programs and in proprietary programs as permitted by the LGPL.
    23                                  
    24                                  ;Function information
    25                                  ;  Function name: isfloat
    26                                  ;  Programming language: X86 assembly in Intel syntax.
    27                                  ;  Date development began:  2022-Feb-28
    28                                  ;  Date version 1.0 finished: 2022-Mar-03
    29                                  ;  Files of this function: isfloat.asm
    30                                  ;  System requirements: an X86 platform with nasm installed o other compatible assembler.
    31                                  ;  Know issues: <now in testing phase>
    32                                  ;  Assembler used for testing: Nasm version 2.14.02
    33                                  ;  Prototype: bool isfloat(char *);
    34                                  ;
    35                                  ;Purpose
    36                                  ;  This function wil accept a string (array of char) and verify that it can be converted to a corresponding 64-bit 
    37                                  ;  float number or not converted to a float number.
    38                                  ;
    39                                  ;Translation information
    40                                  ;  Assemble: nasm -f elf64 -l isfloat.lis -o isfloat.o isfloat.asm
    41                                  ;
    42                                  ;Software design document:
    43                                  ;  An Execution flow chart accompanies this function.  That document will provide a better understanding of the 
    44                                  ;  algorithm used in the isfloat function than a direct reading of the source code of the function.
    45                                  
    46                                  ;========= Begin source code ====================================================================================
    47                                  ;Declaration area
    48                                  
    49                                  global isfloat
    50                                  
    51                                  null equ 0
    52                                  true equ -1
    53                                  false equ 0
    54                                  
    55                                  segment .data
    56                                     ;This segment is empty
    57                                  
    58                                  segment .bss
    59                                     ;This segment is empty
    60                                  
    61                                  segment .text
    62                                  isfloat:
    63                                  
    64                                  ;Block that backs up almost all GPRs
    65                                  ;Back up the general purpose registers for the sole purpose of protecting the data of the caller.
    66 00000000 55                      push rbp                                          ;Backup rbp
    67 00000001 4889E5                  mov  rbp,rsp                                      ;The base pointer now points to top of stack
    68 00000004 57                      push rdi                                          ;Backup rdi
    69 00000005 56                      push rsi                                          ;Backup rsi
    70 00000006 52                      push rdx                                          ;Backup rdx
    71 00000007 51                      push rcx                                          ;Backup rcx
    72 00000008 4150                    push r8                                           ;Backup r8
    73 0000000A 4151                    push r9                                           ;Backup r9
    74 0000000C 4152                    push r10                                          ;Backup r10
    75 0000000E 4153                    push r11                                          ;Backup r11
    76 00000010 4154                    push r12                                          ;Backup r12
    77 00000012 4155                    push r13                                          ;Backup r13
    78 00000014 4156                    push r14                                          ;Backup r14
    79 00000016 4157                    push r15                                          ;Backup r15
    80 00000018 53                      push rbx                                          ;Backup rbx
    81 00000019 9C                      pushf                                             ;Backup rflags
    82                                  
    83                                  
    84                                  ;Make a copy of the passed in array of ascii values
    85 0000001A 4989FD                  mov r13, rdi                                      ;r13 is the array of char
    86                                  
    87                                  ;Let r14 be an index of the array r13.  Initialize to integer 0
    88 0000001D 4D31F6                  xor r14, r14
    89                                  
    90                                  ;Check for leading plus or minus signs
    91 00000020 41807D002B              cmp byte [r13],'+'
    92 00000025 7407                    je increment_index
    93 00000027 41807D002D              cmp byte[r13],'-'
    94 0000002C 7454                    je return_false
    95                                  increment_index:
    96 0000002E 49FFC6                  inc r14
    97                                  
    98                                  continue_validation:
    99                                  
   100                                  ;Block: loop to validate chars before the decimal point
   101                                  loop_before_point:
   102 00000031 B800000000                 mov rax,0
   103 00000036 4831FF                     xor rdi,rdi                ;Zero out rdi
   104 00000039 438A7C3500                 mov dil,byte [r13+1*r14]   ;dil is the low byte in the register rdi; reference Jorgensen, p. 10
   105 0000003E E85C000000                 call is_digit
   106 00000043 4883F800                   cmp rax,false
   107 00000047 7405                       je is_it_radix_point
   108 00000049 49FFC6                     inc r14
   109 0000004C EBE3                       jmp loop_before_point
   110                                  ;End of loop checking chars before the point is encountered.
   111                                  
   112                                  is_it_radix_point:
   113                                  
   114                                  ;Is the next value of the array a genuine radix point?
   115 0000004E 43807C35002E            cmp byte[r13+1*r14],'.'
   116 00000054 752C                        jne return_false
   117                                  
   118                                  ;A point has been found, therefore, begin a loop to process remaining digits.
   119                                  start_loop_after_finding_a_point:
   120 00000056 49FFC6                      inc r14
   121 00000059 B800000000                  mov rax,0
   122 0000005E 4831FF                      xor rdi,rdi
   123 00000061 438A7C3500                  mov dil,byte[r13+1*r14]
   124 00000066 E834000000                  call is_digit
   125 0000006B 4883F800                    cmp rax,false
   126 0000006F 75E5                        jne start_loop_after_finding_a_point
   127                                  ;End of loop processing valid digits after passing the one decimal point.
   128                                  
   129                                  ;Something other than a digit has been found.  
   130                                  ;It should be null at the end of the string.
   131 00000071 43807C350000            cmp byte [r13+1*r14],null
   132 00000077 7509                    jne return_false
   133 00000079 48C7C0FFFFFFFF          mov rax,true
   134 00000080 EB05                    jmp restore_gpr_registers
   135                                      
   136                                  return_false:
   137 00000082 B800000000              mov rax,false
   138                                  
   139                                  restore_gpr_registers:
   140 00000087 9D                      popf                                    ;Restore rflags
   141 00000088 5B                      pop rbx                                 ;Restore rbx
   142 00000089 415F                    pop r15                                 ;Restore r15
   143 0000008B 415E                    pop r14                                 ;Restore r14
   144 0000008D 415D                    pop r13                                 ;Restore r13
   145 0000008F 415C                    pop r12                                 ;Restore r12
   146 00000091 415B                    pop r11                                 ;Restore r11
   147 00000093 415A                    pop r10                                 ;Restore r10
   148 00000095 4159                    pop r9                                  ;Restore r9
   149 00000097 4158                    pop r8                                  ;Restore r8
   150 00000099 59                      pop rcx                                 ;Restore rcx
   151 0000009A 5A                      pop rdx                                 ;Restore rdx
   152 0000009B 5E                      pop rsi                                 ;Restore rsi
   153 0000009C 5F                      pop rdi                                 ;Restore rdi
   154 0000009D 5D                      pop rbp                                 ;Restore rbp
   155                                  
   156 0000009E C3                      ret                                     ;Pop the integer stack and jump to the address represented by the popped value.
   157                                  
   158                                  
   159                                  
   160                                  
   161                                  
   162                                  
   163                                  
   164                                  
   165                                  
   166                                  
   167                                  ;========= Begin function is_digit ==================================================================================
   168                                  
   169                                  ;****************************************************************************************************************************
   170                                  ;Program name: "is_digit".  This a library function contained in a single file.  The function receives a char parameter.  It*
   171                                  ;returns true if that parameter is the ascii value of a decimal digit and returns false in all other cases.                  *
   172                                  ;Copyright (C) 2022 Floyd Holliday.                                                                                         *
   173                                  ;                                                                                                                           *
   174                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public   *
   175                                  ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be   *
   176                                  ;useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.*
   177                                  ;See the GNU Lesser General Public License for more details. A copy of the GNU General Public License v3 is available here: *
   178                                  ;<https:;www.gnu.org/licenses/>.                                                                                            *
   179                                  ;****************************************************************************************************************************
   180                                  ;
   181                                  ;
   182                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
   183                                  ;Author information
   184                                  ;  Author name: Floyd Holliday
   185                                  ;  Author email: holliday@fullerton.edu
   186                                  ;  Author phone (wired phone in CS building): (657)278-7021
   187                                  ;
   188                                  ;Status
   189                                  ;  This software is not an application program, but rather it is a single function licensed for use by other applications.
   190                                  ;  This function can be embedded within both FOSS programs and in proprietary programs as permitted by the LGPL.
   191                                  
   192                                  ;Function information
   193                                  ;  Function name: is_digit
   194                                  ;  Name selection.  This function is named is_digit to avoid confusion with an existing library function named isdigit.
   195                                  ;  Programming language: X86 assembly in Intel syntax.
   196                                  ;  Date development began:  2022-Feb-28
   197                                  ;  Date version 1.0 finished: 2022-Feb 28
   198                                  ;  Files of this function: currently is_digit is an auxillary function of isfloat, and as such does not occupy its own file.
   199                                  ;  System requirements: an X86 platform with nasm installed or other compatible assembler.
   200                                  ;  Known issues: none
   201                                  ;  Assembler used for testing: Nasm version 2.14.02
   202                                  ;  Prototype: bool is_digit(char);
   203                                  ;
   204                                  ;Purpose
   205                                  ;  This function wil accept a single char as input parameter and determine if that parameter represents a decimal digit. 
   206                                  ;
   207                                  ;Translation information if this function occupied its own file.  Currently the function is_digit resides in the same 
   208                                  ;same file as isfloat and therefore, will be assembled when isfloat is assembled.
   209                                  ;  Assemble: nasm -f elf64 -l is_digit.lis -o is_digit.o is_digit.asm
   210                                  ;
   211                                  ;Software design document:
   212                                  ;  An Execution flow chart accompanies this function.  That document will provide a better understanding of the 
   213                                  ;  algorithm used in the isfloat function than a direct reading of the source code of the function.
   214                                  
   215                                  ;========= Begin source code ====================================================================================
   216                                  ;Declaration area
   217                                  true equ -1
   218                                  false equ 0
   219                                  ascii_value_of_zero equ 0x30
   220                                  ascii_value_of_nine equ 0x39
   221                                  
   222                                  segment .data
   223                                     ;This segment is empty
   224                                  
   225                                  segment .bss
   226                                     ;This segment is empty
   227                                  
   228                                  segment .text
   229                                  is_digit:
   230                                  
   231                                  ;Block that backs up almost all GPRs
   232                                  ;Back up the general purpose registers for the sole purpose of protecting the data of the caller.
   233 0000009F 55                      push rbp                                          ;Backup rbp
   234 000000A0 4889E5                  mov  rbp,rsp                                      ;The base pointer now points to top of stack
   235 000000A3 57                      push rdi                                          ;Backup rdi
   236 000000A4 56                      push rsi                                          ;Backup rsi
   237 000000A5 52                      push rdx                                          ;Backup rdx
   238 000000A6 51                      push rcx                                          ;Backup rcx
   239 000000A7 4150                    push r8                                           ;Backup r8
   240 000000A9 4151                    push r9                                           ;Backup r9
   241 000000AB 4152                    push r10                                          ;Backup r10
   242 000000AD 4153                    push r11                                          ;Backup r11
   243 000000AF 4154                    push r12                                          ;Backup r12
   244 000000B1 4155                    push r13                                          ;Backup r13
   245 000000B3 4156                    push r14                                          ;Backup r14
   246 000000B5 4157                    push r15                                          ;Backup r15
   247 000000B7 53                      push rbx                                          ;Backup rbx
   248 000000B8 9C                      pushf                                             ;Backup rflags
   249                                  
   250                                  ;Make a copy of the passed in array of ascii values.
   251                                  ;Note that only the low one-byte of rdi is important for this function is_digit.
   252                                  ;Nevertheless, we copy the entire 8-byte register.
   253 000000B9 41BD00000000            mov r13,0
   254 000000BF 4188FD                  mov r13b,dil     ;Copy the low byte of rdi to the low byte of r13.  The other bytes of rdi are all zeros.
   255                                  
   256                                  ;Block to test if value in r13 >= ascii(0)
   257 000000C2 4983FD30                cmp r13,ascii_value_of_zero
   258 000000C6 7C12                    jl is_digit.return_false
   259                                  
   260                                  ;Block to test if value in r13 <= ascii(9)
   261 000000C8 4983FD39                cmp r13,ascii_value_of_nine
   262 000000CC 7F0C                    jg is_digit.return_false
   263                                  
   264                                  ;Return true
   265 000000CE 4831C0                  xor rax,rax  ;Set rax to zero
   266 000000D1 48C7C0FFFFFFFF          mov rax,true
   267 000000D8 EB08                    jmp is_digit.restore_gpr_registers
   268                                  
   269                                  is_digit.return_false:
   270 000000DA 4831C0                  xor rax,rax  ;Set rax to zero
   271 000000DD B800000000              mov rax,false
   272                                  
   273                                  is_digit.restore_gpr_registers:
   274                                  ;Restore all general purpose registers to their original values
   275 000000E2 9D                      popf                                    ;Restore rflags
   276 000000E3 5B                      pop rbx                                 ;Restore rbx
   277 000000E4 415F                    pop r15                                 ;Restore r15
   278 000000E6 415E                    pop r14                                 ;Restore r14
   279 000000E8 415D                    pop r13                                 ;Restore r13
   280 000000EA 415C                    pop r12                                 ;Restore r12
   281 000000EC 415B                    pop r11                                 ;Restore r11
   282 000000EE 415A                    pop r10                                 ;Restore r10
   283 000000F0 4159                    pop r9                                  ;Restore r9
   284 000000F2 4158                    pop r8                                  ;Restore r8
   285 000000F4 59                      pop rcx                                 ;Restore rcx
   286 000000F5 5A                      pop rdx                                 ;Restore rdx
   287 000000F6 5E                      pop rsi                                 ;Restore rsi
   288 000000F7 5F                      pop rdi                                 ;Restore rdi
   289 000000F8 5D                      pop rbp                                 ;Restore rbp
   290                                  
   291 000000F9 C3                      ret                                     ;Pop the integer stack and jump to the address represented by the popped value.
