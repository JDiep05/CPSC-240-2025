     1                                  ;*******************************************************************************************************************************
     2                                  ; Program name: "Harmonic Mean". This program takes user input's of non-zero floating point number and place them into an array.
     3                                  ; Copyright (C) 2025  Jonthan Diep                                                                                           *
     4                                  ;                                                                                                                              *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License    *
     6                                  ; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.        *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty  *
     8                                  ; of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.                *
     9                                  ; You should have received a copy of the GNU General Public License along with this program.  If not, see                      *
    10                                  ; <https://www.gnu.org/licenses/>.                                                                                             *
    11                                  ;*******************************************************************************************************************************
    12                                  
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ; Author information
    17                                  ;   Author name : Jonathan Diep
    18                                  ;   Author email: jonathon.dieppp@csu.fullerton.edu
    19                                  ;   CWID : 884973462
    20                                  ;   Class: 240-03 Section 03
    21                                  ; Program Information
    22                                  ;   Program Name: Harmonic Mean
    23                                  ;   Programming language: One module in C, Three module in X86, and One module in bash.
    24                                  ;   Date program began: 2025-Mar-10
    25                                  ;   Date of last update: 2025-Mar-10
    26                                  ;   Files in this program: driver.c, manager.asm, input_array.asm, output_array.asm, sum_reciprocals.asm, r.sh
    27                                  ;   Testing: Alpha testing completed. All functions are correct.
    28                                  ;   Status: Ready for release to customers
    29                                  ;
    30                                  ;Purpose
    31                                  ;   This program takes user input's of non-zero floating point number and place them into an array.
    32                                  ;   The program will calculate the sum of reciprocal and the harmonic mean of the array.
    33                                  ;
    34                                  ;This file:
    35                                  ;   File name: output_array.asm
    36                                  ;   Language: X86-64
    37                                  ;   Max page width: 124 columns
    38                                  ;   Assemble (standard): nasm -f elf64 -l output_array.lis -o output_array.o output_array.asm
    39                                  ;   Assemble (debug): nasm -f elf64 -gdwarf -l output_array.lis -o output_array.o output_array.asm
    40                                  ;   Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    41                                  ;   Prototype of this function: extern double output_array();
    42                                  ; 
    43                                  ;
    44                                  ;
    45                                  ;
    46                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    47                                  
    48                                  
    49                                  
    50                                  extern printf
    51                                  
    52                                  global output_array
    53                                  
    54                                  segment .data
    55 00000000 252E35662000            floatformat db "%.5f ", 0
    56                                  
    57 00000006 0A00                    newline db 10, 0
    58                                  
    59                                  segment .bss
    60                                      ; This segment is empty
    61                                  
    62                                  segment .text
    63                                  
    64                                  output_array:
    65                                  
    66                                  ; Backup GPRs
    67 00000000 55                      push rbp
    68 00000001 4889E5                  mov rbp, rsp
    69 00000004 4154                    push r12
    70 00000006 4155                    push r13
    71 00000008 4156                    push r14
    72                                  
    73 0000000A 4989FC                  mov r12, rdi    ; Storing address to r12
    74 0000000D 4989F5                  mov r13, rsi    ; Storing numbers of elements
    75 00000010 41BE00000000            mov r14, 0      ; Set r14 as counter for loop
    76                                  
    77                                  
    78                                  output_loop:
    79 00000016 4D39EE                  cmp r14, r13    ; Compare index with length
    80 00000019 7D27                    jge output_exit ; End loop if index < length
    81                                  
    82                                  ; Print current index
    83 0000001B 4883EC08                sub rsp, 8
    84 0000001F 48BF-                   mov rdi, floatformat
    84 00000021 [0000000000000000] 
    85 00000029 F2430F1004F4            movsd xmm0, [r12 + r14*8]   ; Moving current index from the selected address to xmm0 [Address + Index*byte]
    86 0000002F B801000000              mov rax, 1
    87 00000034 E8(00000000)            call printf
    88 00000039 4883C408                add rsp, 8
    89                                  
    90 0000003D 49FFC6                  inc r14             ; Increase r14 by 1
    91 00000040 EBD4                    jmp output_loop     ; Calling output_loop
    92                                  
    93                                  output_exit:
    94 00000042 B800000000              mov rax, 0
    95 00000047 48BF-                   mov rdi, newline    ; Print newline after output
    95 00000049 [0600000000000000] 
    96 00000051 E8(00000000)            call printf
    97                                  
    98 00000056 415E                    pop r14
    99 00000058 415D                    pop r13
   100 0000005A 415C                    pop r12
   101 0000005C 5D                      pop rbp
   102 0000005D C3                      ret
