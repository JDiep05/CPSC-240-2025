     1                                  ;*******************************************************************************************************************************
     2                                  ; Program name: "Non-deterministic Random Numbers". This program prompts the user for the number of values to generate, fills an array with random numbers, then normalizes and sorts the array.
     3                                  ; Copyright (C) 2025  Jonathan Diep                                                                                             *
     4                                  ;                                                                                                                              *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License    *
     6                                  ; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.        *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty  *
     8                                  ; of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.                *
     9                                  ; You should have received a copy of the GNU General Public License along with this program.  If not, see                      *
    10                                  ; <https://www.gnu.org/licenses/>.                                                                                             *
    11                                  ;*******************************************************************************************************************************
    12                                  
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ; Author information
    17                                  ;   Author name : Jonathan Diep
    18                                  ;   Author email: jonathon.dieppp@csu.fullerton.edu
    19                                  ;   CWID : 884973462
    20                                  ;   Class: 240-03 Section 03
    21                                  ; Program Information
    22                                  ;   Program Name: Non-deterministic Random Numbers
    23                                  ;   Programming language: Two module in C, Five module in X86, and One module in bash.
    24                                  ;   Date program began: 2025-Mar-25
    25                                  ;   Date of last update: 2025-Mar-27
    26                                  ;   Files in this program: gcc -m64 -no-pie -o main.out main.o executive.o fill_random_array.o isnan.o normalize_array.o show_array.o sort.o
    27                                  ;   Testing: Alpha testing completed. All functions are correct.
    28                                  ;   Status: Ready for release to customers
    29                                  ;
    30                                  ;Purpose
    31                                  ;   This program prompts user for a value from 1-100 and generates random scientific decimal based on user input onto the array
    32                                  ;   The program will normalize the values to be between 1.0 and 2.0
    33                                  ;   The program will sort your array in numerical order
    34                                  ;
    35                                  ;This file:
    36                                  ;   File name: executive.asm
    37                                  ;   Language: X86-64
    38                                  ;   Max page width: 124 columns
    39                                  ;   Assemble (standard): nasm -f elf64 -l executive.lis -o executive.o executive.asm
    40                                  ;   Assemble (debug): nasm -f elf64 -gdwarf -l executive.lis -o executive.o executive.asm
    41                                  ;   Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    42                                  ;   Prototype of this function: extern double executive();
    43                                  ; 
    44                                  ;
    45                                  ;
    46                                  ;
    47                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    48                                  
    49                                  
    50                                  ; Declaration
    51                                  extern printf
    52                                  extern scanf
    53                                  extern fgets
    54                                  extern stdin
    55                                  extern strlen
    56                                  extern sort
    57                                  extern show_array
    58                                  extern normalize_array
    59                                  extern fill_random_array
    60                                  
    61                                  global executive
    62                                  
    63                                  string_size equ 24
    64                                  
    65                                  segment .data
    66 00000000 0A506C656173652065-     prompt_name db 10,"Please enter your name: ", 0
    66 00000009 6E74657220796F7572-
    66 00000012 206E616D653A2000   
    67 0000001A 506C6561736520656E-     prompt_title db "Please enter your title (Mr, Ms, Sergeant, Chief, Project Leader, etc.): ", 0
    67 00000023 74657220796F757220-
    67 0000002C 7469746C6520284D72-
    67 00000035 2C204D732C20536572-
    67 0000003E 6765616E742C204368-
    67 00000047 6965662C2050726F6A-
    67 00000050 656374204C65616465-
    67 00000059 722C206574632E293A-
    67 00000062 2000               
    68 00000064 4E69636520746F206D-     msg_1 db "Nice to meet you %s %s", 10, 0
    68 0000006D 65657420796F752025-
    68 00000076 732025730A00       
    69 0000007C 0A546869732070726F-     msg_2 db 10,"This program will generate 64-bit IEEE float numbers.", 10, 0
    69 00000085 6772616D2077696C6C-
    69 0000008E 2067656E6572617465-
    69 00000097 2036342D6269742049-
    69 000000A0 45454520666C6F6174-
    69 000000A9 206E756D626572732E-
    69 000000B2 0A00               
    70 000000B4 486F77206D616E7920-     prompt_num db "How many numbers do you want. Today's limit is 100 per customer. ", 0
    70 000000BD 6E756D626572732064-
    70 000000C6 6F20796F752077616E-
    70 000000CF 742E20546F64617927-
    70 000000D8 73206C696D69742069-
    70 000000E1 732031303020706572-
    70 000000EA 20637573746F6D6572-
    70 000000F3 2E2000             
    71 000000F6 0A496E707574207369-     invalid_msg db 10, "Input size is under 0 or over 100. Please try again.", 10, 0
    71 000000FF 7A6520697320756E64-
    71 00000108 65722030206F72206F-
    71 00000111 766572203130302E20-
    71 0000011A 506C65617365207472-
    71 00000123 7920616761696E2E0A-
    71 0000012C 00                 
    72 0000012D 256400                  int_format db "%d", 0
    73 00000130 596F7572206E756D62-     msg_3 db "Your numbers have been stored in an array. Here is that array.", 10, 0
    73 00000139 657273206861766520-
    73 00000142 6265656E2073746F72-
    73 0000014B 656420696E20616E20-
    73 00000154 61727261792E204865-
    73 0000015D 726520697320746861-
    73 00000166 742061727261792E0A-
    73 0000016F 00                 
    74 00000170 0A5468652061727261-     msg_4 db 10,"The array will now be normalized to the range 1.0 to 2.0. Here is the normalized array", 10, 0
    74 00000179 792077696C6C206E6F-
    74 00000182 77206265206E6F726D-
    74 0000018B 616C697A656420746F-
    74 00000194 207468652072616E67-
    74 0000019D 6520312E3020746F20-
    74 000001A6 322E302E2048657265-
    74 000001AF 20697320746865206E-
    74 000001B8 6F726D616C697A6564-
    74 000001C1 2061727261790A00   
    75 000001C9 0A5468652061727261-     msg_5 db 10,"The array will now be sorted", 10, 0
    75 000001D2 792077696C6C206E6F-
    75 000001DB 7720626520736F7274-
    75 000001E4 65640A00           
    76 000001E8 0A476F6F6462796520-     msg_6 db 10,"Goodbye %s %s. You are welcome anytime.", 10, 0
    76 000001F1 25732025732E20596F-
    76 000001FA 75206172652077656C-
    76 00000203 636F6D6520616E7974-
    76 0000020C 696D652E0A00       
    77                                  
    78                                  segment .bss
    79                                  align 64
    80 00000000 <res 00000340>          backup_storage_area resb 832
    81                                  
    82 00000340 <res 00000018>          name resb string_size
    83 00000358 <res 00000018>          title resb string_size
    84 00000370 <res 00000320>          my_array resq 100
    85                                  
    86                                  segment .text
    87                                  executive:
    88                                  
    89                                  ; Backup GPRs
    90 00000000 55                      push rbp
    91 00000001 4889E5                  mov rbp, rsp
    92 00000004 53                      push rbx
    93 00000005 51                      push rcx
    94 00000006 52                      push rdx
    95 00000007 57                      push rdi
    96 00000008 56                      push rsi
    97 00000009 4150                    push r8
    98 0000000B 4151                    push r9
    99 0000000D 4152                    push r10
   100 0000000F 4153                    push r11
   101 00000011 4154                    push r12
   102 00000013 4155                    push r13
   103 00000015 4156                    push r14
   104 00000017 4157                    push r15
   105 00000019 9C                      pushf
   106                                  
   107                                  ; Backup other registers
   108 0000001A B807000000              mov rax, 7
   109 0000001F BA00000000              mov rdx, 0
   110 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
   111                                  
   112 0000002C B800000000              mov rax, 0
   113 00000031 48BF-                   mov rdi, prompt_name
   113 00000033 [0000000000000000] 
   114 0000003B E8(00000000)            call printf
   115                                  
   116 00000040 B800000000              mov rax, 0
   117 00000045 48BF-                   mov rdi, name
   117 00000047 [4003000000000000] 
   118 0000004F BE18000000              mov rsi, string_size
   119 00000054 488B1425[00000000]      mov rdx, [stdin]
   120 0000005C E8(00000000)            call fgets
   121                                  
   122                                  ;remove newline
   123 00000061 B800000000              mov rax, 0
   124 00000066 48BF-                   mov rdi, name
   124 00000068 [4003000000000000] 
   125 00000070 E8(00000000)            call strlen
   126 00000075 C680[3F030000]00        mov [name+rax-1], byte 0
   127                                  
   128 0000007C B800000000              mov rax, 0
   129 00000081 48BF-                   mov rdi, prompt_title
   129 00000083 [1A00000000000000] 
   130 0000008B E8(00000000)            call printf
   131                                  
   132 00000090 B800000000              mov rax, 0
   133 00000095 48BF-                   mov rdi, title
   133 00000097 [5803000000000000] 
   134 0000009F BE18000000              mov rsi, string_size
   135 000000A4 488B1425[00000000]      mov rdx, [stdin]
   136 000000AC E8(00000000)            call fgets
   137                                  
   138 000000B1 B800000000              mov rax, 0
   139 000000B6 48BF-                   mov rdi, title
   139 000000B8 [5803000000000000] 
   140 000000C0 E8(00000000)            call strlen
   141 000000C5 C680[57030000]00        mov [title + rax - 1], byte 0
   142                                  
   143 000000CC B800000000              mov rax, 0
   144 000000D1 48BF-                   mov rdi, msg_1
   144 000000D3 [6400000000000000] 
   145 000000DB 48BE-                   mov rsi, title
   145 000000DD [5803000000000000] 
   146 000000E5 48BA-                   mov rdx, name
   146 000000E7 [4003000000000000] 
   147 000000EF E8(00000000)            call printf
   148                                  
   149 000000F4 B800000000              mov rax, 0
   150 000000F9 48BF-                   mov rdi, msg_2
   150 000000FB [7C00000000000000] 
   151 00000103 E8(00000000)            call printf
   152                                  
   153                                  size_input:
   154 00000108 B800000000              mov rax, 0
   155 0000010D 48BF-                   mov rdi, prompt_num
   155 0000010F [B400000000000000] 
   156 00000117 E8(00000000)            call printf
   157                                  
   158 0000011C 6A00                    push qword 0
   159 0000011E 6A00                    push qword 0
   160 00000120 B800000000              mov rax, 0
   161 00000125 48BF-                   mov rdi, int_format
   161 00000127 [2D01000000000000] 
   162 0000012F 4889E6                  mov rsi, rsp
   163 00000132 E8(00000000)            call scanf
   164 00000137 4C8B3C24                mov r15, [rsp]
   165 0000013B 58                      pop rax
   166 0000013C 58                      pop rax
   167                                  
   168 0000013D 4983FF01                cmp r15, 1
   169 00000141 7C08                    jl invalid_input
   170                                  
   171 00000143 4983FF64                cmp r15, 100
   172 00000147 7F02                    jg invalid_input
   173                                  
   174 00000149 EB16                    jmp continue
   175                                  
   176                                  invalid_input:
   177 0000014B B800000000              mov rax, 0
   178 00000150 48BF-                   mov rdi, invalid_msg
   178 00000152 [F600000000000000] 
   179 0000015A E8(00000000)            call printf
   180 0000015F EBA7                    jmp size_input
   181                                  
   182                                  continue:
   183 00000161 B800000000              mov rax, 0
   184 00000166 48BF-                   mov rdi, my_array
   184 00000168 [7003000000000000] 
   185 00000170 4C89FE                  mov rsi, r15
   186 00000173 E8(00000000)            call fill_random_array
   187                                  
   188 00000178 B800000000              mov rax, 0
   189 0000017D 48BF-                   mov rdi, msg_3
   189 0000017F [3001000000000000] 
   190 00000187 E8(00000000)            call printf
   191                                  
   192 0000018C B800000000              mov rax, 0
   193 00000191 48BF-                   mov rdi, my_array
   193 00000193 [7003000000000000] 
   194 0000019B 4C89FE                  mov rsi, r15
   195 0000019E E8(00000000)            call show_array
   196                                  
   197 000001A3 B800000000              mov rax, 0
   198 000001A8 48BF-                   mov rdi, my_array
   198 000001AA [7003000000000000] 
   199 000001B2 4C89FE                  mov rsi, r15
   200 000001B5 E8(00000000)            call normalize_array
   201                                  
   202 000001BA B800000000              mov rax, 0
   203 000001BF 48BF-                   mov rdi, msg_4
   203 000001C1 [7001000000000000] 
   204 000001C9 E8(00000000)            call printf
   205                                  
   206 000001CE B800000000              mov rax, 0
   207 000001D3 48BF-                   mov rdi, my_array
   207 000001D5 [7003000000000000] 
   208 000001DD 4C89FE                  mov rsi, r15
   209 000001E0 E8(00000000)            call show_array
   210                                  
   211 000001E5 B800000000              mov rax, 0
   212 000001EA 48BF-                   mov rdi, my_array
   212 000001EC [7003000000000000] 
   213 000001F4 4C89FE                  mov rsi, r15
   214 000001F7 E8(00000000)            call sort
   215                                  
   216 000001FC B800000000              mov rax, 0
   217 00000201 48BF-                   mov rdi, msg_5
   217 00000203 [C901000000000000] 
   218 0000020B E8(00000000)            call printf
   219                                  
   220 00000210 B800000000              mov rax, 0
   221 00000215 48BF-                   mov rdi, my_array
   221 00000217 [7003000000000000] 
   222 0000021F 4C89FE                  mov rsi, r15
   223 00000222 E8(00000000)            call show_array
   224                                  
   225 00000227 B800000000              mov rax, 0
   226 0000022C 48BF-                   mov rdi, msg_6
   226 0000022E [E801000000000000] 
   227 00000236 48BE-                   mov rsi, title
   227 00000238 [5803000000000000] 
   228 00000240 48BA-                   mov rdx, name
   228 00000242 [4003000000000000] 
   229 0000024A E8(00000000)            call printf
   230                                  
   231 0000024F B807000000              mov rax, 7
   232 00000254 BA00000000              mov rdx, 0
   233 00000259 0FAE2C25[00000000]      xrstor [backup_storage_area]
   234                                  
   235                                  ;send the name of the user back to main to be printed
   236 00000261 48B8-                   mov rax, name
   236 00000263 [4003000000000000] 
   237                                  
   238                                  ;Restore the GPRs
   239 0000026B 9D                      popf
   240 0000026C 415F                    pop r15
   241 0000026E 415E                    pop r14
   242 00000270 415D                    pop r13
   243 00000272 415C                    pop r12
   244 00000274 415B                    pop r11
   245 00000276 415A                    pop r10
   246 00000278 4159                    pop r9
   247 0000027A 4158                    pop r8
   248 0000027C 5E                      pop rsi
   249 0000027D 5F                      pop rdi
   250 0000027E 5A                      pop rdx
   251 0000027F 59                      pop rcx
   252 00000280 5B                      pop rbx
   253 00000281 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   254 00000282 C3                      ret
