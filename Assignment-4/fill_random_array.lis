     1                                  ;*******************************************************************************************************************************
     2                                  ; Program name: "Non-deterministic Random Numbers". This program prompts the user for the number of values to generate, fills an array with random numbers, then normalizes and sorts the array.
     3                                  ; Copyright (C) 2025  Jonathan Diep                                                                                             *
     4                                  ;                                                                                                                              *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License    *
     6                                  ; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.        *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty  *
     8                                  ; of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.                *
     9                                  ; You should have received a copy of the GNU General Public License along with this program.  If not, see                      *
    10                                  ; <https://www.gnu.org/licenses/>.                                                                                             *
    11                                  ;*******************************************************************************************************************************
    12                                  
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ; Author information
    17                                  ;   Author name : Jonathan Diep
    18                                  ;   Author email: jonathon.dieppp@csu.fullerton.edu
    19                                  ;   CWID : 884973462
    20                                  ;   Class: 240-03 Section 03
    21                                  ; Program Information
    22                                  ;   Program Name: Non-deterministic Random Numbers
    23                                  ;   Programming language: Two module in C, Five module in X86, and One module in bash.
    24                                  ;   Date program began: 2025-Mar-25
    25                                  ;   Date of last update: 2025-Mar-27
    26                                  ;   Files in this program: gcc -m64 -no-pie -o main.out main.o executive.o fill_random_array.o isnan.o normalize_array.o show_array.o sort.o
    27                                  ;   Testing: Alpha testing completed. All functions are correct.
    28                                  ;   Status: Ready for release to customers
    29                                  ;
    30                                  ;Purpose
    31                                  ;   This program prompts user for a value from 1-100 and generates random scientific decimal based on user input onto the array
    32                                  ;   The program will normalize the values to be between 1.0 and 2.0
    33                                  ;   The program will sort your array in numerical order
    34                                  ;
    35                                  ;This file:
    36                                  ;   File name: fill_random_array.asm
    37                                  ;   Language: X86-64
    38                                  ;   Max page width: 124 columns
    39                                  ;   Assemble (standard): nasm -f elf64 -l fill_random_array.lis -o fill_random_array.o fill_random_array.asm
    40                                  ;   Assemble (debug): nasm -f elf64 -gdwarf -l fill_random_array.lis -o fill_random_array.o fill_random_array.asm
    41                                  ;   Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    42                                  ;   Prototype of this function: extern double fill_random_array();
    43                                  ; 
    44                                  ;
    45                                  ;
    46                                  ;
    47                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    48                                  
    49                                  
    50                                  extern printf
    51                                  extern isnan
    52                                  
    53                                  global fill_random_array
    54                                  
    55                                  segment .data                 ;Place initialized data here
    56 00000000 0A2564202025640A00      intformat db 10, "%d  %d", 10, 0 
    57 00000009 2531382E3133670000-     int_float dq "%18.13g", 0
    57 00000012 00000000000000     
    58                                  
    59                                  segment .bss      ;Declare pointers to un-initialized space in this segment.
    60                                  
    61                                  segment .text
    62                                  fill_random_array:
    63                                  
    64                                  ;backup GPRs
    65 00000000 55                      push rbp
    66 00000001 4889E5                  mov rbp, rsp
    67 00000004 53                      push rbx
    68 00000005 51                      push rcx
    69 00000006 52                      push rdx
    70 00000007 57                      push rdi
    71 00000008 56                      push rsi
    72 00000009 4150                    push r8
    73 0000000B 4151                    push r9
    74 0000000D 4152                    push r10
    75 0000000F 4153                    push r11
    76 00000011 4154                    push r12
    77 00000013 4155                    push r13
    78 00000015 4156                    push r14
    79 00000017 4157                    push r15
    80 00000019 9C                      pushf
    81                                  
    82 0000001A 4989FC                  mov r12, rdi    ; Storing array
    83 0000001D 4989F5                  mov r13, rsi    ; Storing size
    84 00000020 41BE00000000            mov r14, 0      ; Setting r14 as 0 to use as counter
    85                                  
    86                                  check_size:
    87 00000026 4D39EE                  cmp r14, r13
    88 00000029 7C02                    jl fill_array
    89                                  
    90 0000002B EB35                    jmp exit
    91                                  
    92                                  fill_array:
    93 0000002D B800000000              mov rax, 0
    94 00000032 490FC7F7                rdrand r15
    95 00000036 4C89FF                  mov rdi, r15
    96 00000039 4157                    push r15
    97 0000003B 4157                    push r15
    98 0000003D F2440F103C24            movsd xmm15, [rsp]
    99 00000043 415F                    pop r15
   100 00000045 415F                    pop r15
   101                                  
   102 00000047 F2410F10C7              movsd xmm0, xmm15
   103 0000004C E8(00000000)            call isnan
   104 00000051 4883F800                cmp rax, 0
   105 00000055 74D6                    je fill_array
   106                                  
   107 00000057 F2470F113CF4            movsd [r12+r14*8], xmm15
   108                                  
   109 0000005D 49FFC6                  inc r14
   110 00000060 EBC4                    jmp check_size
   111                                  
   112                                  exit:
   113                                  ; Restore the GPRs
   114 00000062 9D                      popf
   115 00000063 415F                    pop r15
   116 00000065 415E                    pop r14
   117 00000067 415D                    pop r13
   118 00000069 415C                    pop r12
   119 0000006B 415B                    pop r11
   120 0000006D 415A                    pop r10
   121 0000006F 4159                    pop r9
   122 00000071 4158                    pop r8
   123 00000073 5E                      pop rsi
   124 00000074 5F                      pop rdi
   125 00000075 5A                      pop rdx
   126 00000076 59                      pop rcx
   127 00000077 5B                      pop rbx
   128 00000078 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   129 00000079 C3                      ret
