     1                                  extern printf
     2                                  
     3                                  extern scanf
     4                                  
     5                                  extern atof
     6                                  
     7                                  extern isfloat
     8                                  
     9                                  global input_array
    10                                  
    11                                  segment .data
    12 00000000 257300                    floatformat db "%s", 0
    13 00000003 546865206C61737420-       invalid_float db "The last input was invalid and not entered into the array. Try again.", 10, 0
    13 0000000C 696E70757420776173-
    13 00000015 20696E76616C696420-
    13 0000001E 616E64206E6F742065-
    13 00000027 6E746572656420696E-
    13 00000030 746F20746865206172-
    13 00000039 7261792E2054727920-
    13 00000042 616761696E2E0A00   
    14                                  
    15                                  segment .bss      ;Declare pointers to un-initialized space in this segment.
    16                                    align 64
    17 00000000 <res 00000340>            backup_storage_area resb 832
    18                                    
    19                                  segment .text
    20                                  input_array:
    21                                  
    22                                  ;backup GPRs
    23 00000000 55                      push rbp
    24 00000001 4889E5                  mov rbp, rsp
    25 00000004 53                      push rbx
    26 00000005 51                      push rcx
    27 00000006 52                      push rdx
    28 00000007 57                      push rdi
    29 00000008 56                      push rsi
    30 00000009 4150                    push r8
    31 0000000B 4151                    push r9
    32 0000000D 4152                    push r10
    33 0000000F 4153                    push r11
    34 00000011 4154                    push r12
    35 00000013 4155                    push r13
    36 00000015 4156                    push r14
    37 00000017 4157                    push r15
    38 00000019 9C                      pushf
    39                                  
    40                                  ;backup other registers/sse registers
    41 0000001A B807000000              mov rax,7
    42 0000001F BA00000000              mov rdx,0
    43 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
    44                                  
    45 0000002C 4989FF                  mov r15, rdi    ;storing address
    46 0000002F 4989F6                  mov r14, rsi    ;storing reserved size
    47                                  
    48 00000032 41BD00000000            mov r13, 0      ;count for index
    49                                  
    50                                  get_input:
    51                                  ; Prompt user for input
    52 00000038 B800000000              mov rax, 0
    53 0000003D 4883EC20                sub rsp, 32            ; Allocates 32 bytes for user input
    54 00000041 48BF-                   mov rdi, floatformat
    54 00000043 [0000000000000000] 
    55 0000004B 4889E6                  mov rsi, rsp           ; Store user input at rsp
    56 0000004E E8(00000000)            call scanf             ; Read user input
    57 00000053 4883C420                add rsp, 32            ; Free allocated space after input
    58                                  
    59                                  ; Check for Control+D input
    60 00000057 4898                    cdqe
    61 00000059 4883F8FF                cmp rax, -1           
    62 0000005D 7443                    je exit_input         ; If EOF, exit input loop
    63                                  
    64                                  ; Check for valid input as a floating-point number
    65 0000005F 4889E7                  mov rdi, rsp          ; Pass user input to isfloat
    66 00000062 E8(00000000)            call isfloat
    67 00000067 4883F800                cmp rax, 0            ; If not a float, show error
    68 0000006B 741D                    je invalid_input      ; Jump if invalid input
    69                                  
    70                                  ; Convert valid float input from string to double value
    71 0000006D 4889E7                  mov rdi, rsp          ; Pass input to atof
    72 00000070 E8(00000000)            call atof             ; Result in xmm0
    73 00000075 F2440F10F8              movsd xmm15, xmm0     ; Store converted float in xmm15
    74                                  
    75                                  ; Check if input is full
    76 0000007A 4D39F5                  cmp r13, r14          ; Compare index to max size
    77 0000007D 7D21                    jge array_full        ; Stops input process if array is full
    78                                  
    79                                  ; Store float in array
    80 0000007F F2470F113CEF            movsd [r15 + r13*8], xmm15  ; Store float in array [address + index*byte]
    81 00000085 49FFC5                  inc r13                     ; Increment array counter
    82                                  
    83 00000088 EBAE                    jmp get_input         ; Loop input
    84                                  
    85                                  invalid_input:
    86                                  ; Print error message
    87 0000008A B800000000              mov rax, 0
    88 0000008F 48BF-                   mov rdi, invalid_float
    88 00000091 [0300000000000000] 
    89 00000099 E8(00000000)            call printf
    90                                  
    91 0000009E EB98                    jmp get_input         ; Loop input
    92                                  
    93                                  array_full:
    94                                  ; The array is full, exit input loop
    95 000000A0 EB00                    jmp exit_input
    96                                  
    97                                  exit_input:
    98                                  ; Restore registers
    99 000000A2 B807000000              mov rax, 7
   100 000000A7 BA00000000              mov rdx, 0
   101 000000AC 0FAE2C25[00000000]      xrstor [backup_storage_area]  ; Restore SSE registers
   102                                  
   103 000000B4 4C89E8                  mov rax, r13   ; Store array length in rax to return
   104                                  
   105                                  ; Restore general-purpose registers
   106 000000B7 9D                      popf
   107 000000B8 415F                    pop r15
   108 000000BA 415E                    pop r14
   109 000000BC 415D                    pop r13
   110 000000BE 415C                    pop r12
   111 000000C0 415B                    pop r11
   112 000000C2 415A                    pop r10
   113 000000C4 4159                    pop r9
   114 000000C6 4158                    pop r8
   115 000000C8 5E                      pop rsi
   116 000000C9 5F                      pop rdi
   117 000000CA 5A                      pop rdx
   118 000000CB 59                      pop rcx
   119 000000CC 5B                      pop rbx
   120 000000CD 5D                      pop rbp
   121 000000CE C3                      ret
