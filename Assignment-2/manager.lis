     1                                  ;*******************************************************************************************************************************
     2                                  ; Program name: "Arrays of Floating Point Numbers". This program takes user input's of floating point number and place them into an array.
     3                                  ; Copyright (C) 2025  Jonthan Diep                                                                                             *
     4                                  ;                                                                                                                              *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License    *
     6                                  ; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.        *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty  *
     8                                  ; of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.                *
     9                                  ; You should have received a copy of the GNU General Public License along with this program.  If not, see                      *
    10                                  ; <https://www.gnu.org/licenses/>.                                                                                             *
    11                                  ;*******************************************************************************************************************************
    12                                  
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ; Author information
    17                                  ;   Author name : Jonathan Diep
    18                                  ;   Author email: jonathon.dieppp@csu.fullerton.edu
    19                                  ;   CWID : 884973462
    20                                  ;   Class: 240-03 Section 03
    21                                  ; Program Information
    22                                  ;   Program Name: Arrays of Floating Point Numbers
    23                                  ;   Programming language: Two module in C, Six module in X86, and One module in bash.
    24                                  ;   Date program began: 2025-Feb-22
    25                                  ;   Date of last update: 2025-Feb-22
    26                                  ;   Files in this program: main.c, manager.asm, input_array.asm, output_array.asm, sum.asm, sort.asm, swap.asm, isfloat.asm, run.sh.
    27                                  ;   Testing: Alpha testing completed. All functions are correct.
    28                                  ;   Status: Ready for release to customers
    29                                  ;
    30                                  ;Purpose
    31                                  ;   This program takes user input's of floating point number and place them into an array.
    32                                  ;   The program will calculate the sum, the mean, and sort the array.
    33                                  ;
    34                                  ;This file:
    35                                  ;   File name: manager.asm
    36                                  ;   Language: X86-64
    37                                  ;   Max page width: 124 columns
    38                                  ;   Assemble (standard): nasm -f elf64 -l manager.lis -o manager.o manager.asm
    39                                  ;   Assemble (debug): nasm -f elf64 -gdwarf -l manager.lis -o manager.o manager.asm
    40                                  ;   Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    41                                  ;   Prototype of this function: extern double triangle();
    42                                  ; 
    43                                  ;
    44                                  ;
    45                                  ;
    46                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    47                                  
    48                                  
    49                                  extern printf
    50                                  
    51                                  extern input_array
    52                                  
    53                                  extern output_array
    54                                  
    55                                  extern sum
    56                                  
    57                                  extern sort
    58                                  
    59                                  global manager
    60                                  
    61                                  segment .data
    62 00000000 546869732070726F67-     info_1 db "This program will manage your arrays of 64-bit floats", 10, 0
    62 00000009 72616D2077696C6C20-
    62 00000012 6D616E61676520796F-
    62 0000001B 757220617272617973-
    62 00000024 206F662036342D6269-
    62 0000002D 7420666C6F6174730A-
    62 00000036 00                 
    63 00000037 466F72207468652061-     info_2 db "For the array enter a sequence of 64-bit floats separated by white space.", 10, 0
    63 00000040 7272617920656E7465-
    63 00000049 722061207365717565-
    63 00000052 6E6365206F66203634-
    63 0000005B 2D62697420666C6F61-
    63 00000064 747320736570617261-
    63 0000006D 746564206279207768-
    63 00000076 697465207370616365-
    63 0000007F 2E0A00             
    64 00000082 416674657220746865-     info_3 db "After the last input press enter followed by Control+D:", 10, 0
    64 0000008B 206C61737420696E70-
    64 00000094 757420707265737320-
    64 0000009D 656E74657220666F6C-
    64 000000A6 6C6F77656420627920-
    64 000000AF 436F6E74726F6C2B44-
    64 000000B8 3A0A00             
    65 000000BB 0A5468657365206E75-     info_4 db 10, "These numbers were received and placed into an array", 10, 0
    65 000000C4 6D6265727320776572-
    65 000000CD 652072656365697665-
    65 000000D6 6420616E6420706C61-
    65 000000DF 63656420696E746F20-
    65 000000E8 616E2061727261790A-
    65 000000F1 00                 
    66 000000F2 5468652073756D206F-     info_5 db "The sum of the inputted number is %.9lf", 10, 0
    66 000000FB 662074686520696E70-
    66 00000104 7574746564206E756D-
    66 0000010D 62657220697320252E-
    66 00000116 396C660A00         
    67 0000011B 546865206172697468-     info_6 db "The arithmetic mean of the numbers in the array is %.6lf", 10, 0
    67 00000124 6D65746963206D6561-
    67 0000012D 6E206F662074686520-
    67 00000136 6E756D626572732069-
    67 0000013F 6E2074686520617272-
    67 00000148 617920697320252E36-
    67 00000151 6C660A00           
    68 00000155 546869732069732074-     info_7 db "This is the array after the sort process completed:", 10, 0
    68 0000015E 686520617272617920-
    68 00000167 616674657220746865-
    68 00000170 20736F72742070726F-
    68 00000179 6365737320636F6D70-
    68 00000182 6C657465643A0A00   
    69 0000018A 0A256C660A00            floatformat db 10, "%lf", 10, 0 ; To test if floats are passing
    70 00000190 0A25640A00              intformat db 10,"%d", 10, 0     ; To test if size is working
    71                                  
    72                                  segment .bss
    73                                  align 64
    74 00000000 <res 00000340>          backup_storage_area resb 832
    75                                  
    76 00000340 <res 00000080>          my_array resq 16    ; reserve 16 quadword (128 bytes)
    77                                  
    78                                  segment .text
    79                                  manager: 
    80                                  
    81                                  ;backup GPRs
    82 00000000 55                      push rbp
    83 00000001 4889E5                  mov rbp, rsp
    84 00000004 53                      push rbx
    85 00000005 51                      push rcx
    86 00000006 52                      push rdx
    87 00000007 57                      push rdi
    88 00000008 56                      push rsi
    89 00000009 4150                    push r8
    90 0000000B 4151                    push r9
    91 0000000D 4152                    push r10
    92 0000000F 4153                    push r11
    93 00000011 4154                    push r12
    94 00000013 4155                    push r13
    95 00000015 4156                    push r14
    96 00000017 4157                    push r15
    97 00000019 9C                      pushf
    98                                  
    99                                  ; Backup other registers
   100 0000001A B807000000              mov rax, 7
   101 0000001F BA00000000              mov rdx, 0
   102 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
   103                                  
   104                                  ; Print first message
   105 0000002C B800000000              mov rax, 0 
   106 00000031 48BF-                   mov rdi, info_1
   106 00000033 [0000000000000000] 
   107 0000003B E8(00000000)            call printf
   108                                  
   109                                  ; Print second message
   110 00000040 B800000000              mov rax, 0
   111 00000045 48BF-                   mov rdi, info_2
   111 00000047 [3700000000000000] 
   112 0000004F E8(00000000)            call printf
   113                                  
   114                                  ; Print third message
   115 00000054 B800000000              mov rax, 0
   116 00000059 48BF-                   mov rdi, info_3
   116 0000005B [8200000000000000] 
   117 00000063 E8(00000000)            call printf
   118                                  
   119                                  ; Calling input_array(array, size)
   120 00000068 B800000000              mov rax, 0
   121 0000006D 48BF-                   mov rdi, my_array   ; The name of the array
   121 0000006F [4003000000000000] 
   122 00000077 BE10000000              mov rsi, 16         ; The size of the array
   123 0000007C E8(00000000)            call input_array    ; Calling the function to implement user's input into the array
   124                                  
   125 00000081 4989C5                  mov r13, rax        ; Saving length of array
   126                                  
   127                                  ; Print fourth message
   128 00000084 B800000000              mov rax, 0
   129 00000089 48BF-                   mov rdi, info_4
   129 0000008B [BB00000000000000] 
   130 00000093 E8(00000000)            call printf
   131                                  
   132                                  ; Printing out the array
   133 00000098 B800000000              mov rax, 0
   134 0000009D 48BF-                   mov rdi, my_array   ; The array with the user's input
   134 0000009F [4003000000000000] 
   135 000000A7 4C89EE                  mov rsi, r13        ; The length of the array
   136 000000AA E8(00000000)            call output_array   ; Function for printing out all the numbers in the array onto one line
   137                                  
   138                                  ; Calling sum function to add all the numbers in the array
   139 000000AF B800000000              mov rax, 0
   140 000000B4 48BF-                   mov rdi, my_array
   140 000000B6 [4003000000000000] 
   141 000000BE 4C89EE                  mov rsi, r13
   142 000000C1 E8(00000000)            call sum            ; Function that will add all the numbers in the array
   143                                  
   144 000000C6 F2440F10F8              movsd xmm15, xmm0   ; Moving the sum result from the function into a non-violatile register
   145                                  
   146 000000CB B801000000              mov rax, 1          ; Passing one floating-point number
   147 000000D0 48BF-                   mov rdi, info_5
   147 000000D2 [F200000000000000] 
   148 000000DA F2410F10C7              movsd xmm0, xmm15   ; Moving sum into xmm0 to print
   149 000000DF E8(00000000)            call printf         ; Prints the fifth message and implementing xmm0(sum) into the placeholder
   150                                  
   151 000000E4 4D89EE                  mov r14, r13        ; Backing up r13 (length of array)
   152                                  
   153 000000E7 F2490F2ACD              cvtsi2sd xmm1, r13  ; Convert r13 (number of elements) to a double into xmm1
   154 000000EC F2410F10C7              movsd xmm0, xmm15   ; Using sum to find the mean by dividing with count
   155 000000F1 F20F5EC1                divsd xmm0, xmm1    ; xmm0 = sum / count
   156                                  
   157 000000F5 4D89F5                  mov r13, r14        ; Restoring r13 (length of array)
   158                                  
   159                                  ; Print the Mean
   160 000000F8 B801000000              mov rax, 1          ; Passing one floating-point number
   161 000000FD 48BF-                   mov rdi, info_6     ; The mean is already in xmm0, which is needed to pass into printf
   161 000000FF [1B01000000000000] 
   162 00000107 E8(00000000)            call printf         ; Prints the sixth message with the Arithmetic Mean Value
   163                                  
   164                                  ; Print seventh message
   165 0000010C B800000000              mov rax, 0
   166 00000111 48BF-                   mov rdi, info_7
   166 00000113 [5501000000000000] 
   167 0000011B E8(00000000)            call printf
   168                                  
   169                                  ; Sort the array in numerical order
   170 00000120 B800000000              mov rax, 0
   171 00000125 48BF-                   mov rdi, my_array
   171 00000127 [4003000000000000] 
   172 0000012F 4C89EE                  mov rsi, r13
   173 00000132 E8(00000000)            call sort           ; A function that uses nested loop to iterate through the array and sort it numerically
   174                                  
   175                                  ; Print out the sorted array
   176 00000137 B800000000              mov rax, 0
   177 0000013C 48BF-                   mov rdi, my_array   ; Contains the sorted array
   177 0000013E [4003000000000000] 
   178 00000146 4C89EE                  mov rsi, r13
   179 00000149 E8(00000000)            call output_array   ; Passing the sorted array into the output_array function to print
   180                                  
   181                                  ; Saving xmm15 (sum) 
   182 0000014E B800000000              mov rax, 0
   183 00000153 6A00                    push qword 0        ; Reserving 8 bytes to maintain the sum
   184 00000155 F2440F113C24            movsd [rsp], xmm15  ; Passing the sum into the reserved q word
   185                                  
   186                                  ; Restoring registers
   187 0000015B B807000000              mov rax, 7
   188 00000160 B800000000              mov rax, 0
   189 00000165 0FAE2C25[00000000]      xrstor [backup_storage_area]
   190                                  
   191                                  ; Sending the sum to main
   192 0000016D F20F100424              movsd xmm0, [rsp]   ; Passing rsp to xmm0, xmm0 will be returned
   193 00000172 58                      pop rax
   194                                  
   195                                  ;Restore the GPRs
   196 00000173 9D                      popf
   197 00000174 415F                    pop r15
   198 00000176 415E                    pop r14
   199 00000178 415D                    pop r13
   200 0000017A 415C                    pop r12
   201 0000017C 415B                    pop r11
   202 0000017E 415A                    pop r10
   203 00000180 4159                    pop r9
   204 00000182 4158                    pop r8
   205 00000184 5E                      pop rsi
   206 00000185 5F                      pop rdi
   207 00000186 5A                      pop rdx
   208 00000187 59                      pop rcx
   209 00000188 5B                      pop rbx
   210 00000189 5D                      pop rbp
   211 0000018A C3                      ret
   212                                  
   213                                  
   214                                  
