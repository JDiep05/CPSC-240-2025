     1                                  extern printf
     2                                  
     3                                  global output_array
     4                                  
     5                                  segment .data
     6 00000000 252E39662000            floatformat db "%.9f ", 0
     7 00000006 256400                  intformat db "%d", 0
     8                                  
     9 00000009 0A00                    newline db 10, 0
    10                                  
    11                                  segment .bss
    12                                      ;This segment is empty
    13                                  
    14                                  segment .text
    15                                  
    16                                  output_array:
    17                                  
    18                                  ;backup GPRs
    19 00000000 55                      push rbp
    20 00000001 4889E5                  mov rbp, rsp
    21 00000004 4154                    push r12
    22 00000006 4155                    push r13
    23 00000008 4156                    push r14
    24                                  
    25 0000000A 4989FC                  mov r12, rdi    ; Storing address to r12
    26 0000000D 4989F5                  mov r13, rsi    ; Storing numbers of elements
    27 00000010 41BE00000000            mov r14, 0   ; Set r14 as counter for loop
    28                                  
    29                                  
    30                                  output_loop:
    31 00000016 4D39EE                  cmp r14, r13    ; Compare index with length
    32 00000019 7D27                    jge output_exit ; End loop if index < length
    33                                  
    34                                  ; Print current index
    35 0000001B 4883EC08                sub rsp, 8
    36 0000001F 48BF-                   mov rdi, floatformat
    36 00000021 [0000000000000000] 
    37 00000029 F2430F1004F4            movsd xmm0, [r12 + r14*8]   ; Moving current index from the selected address to xmm0 [Address + Index*byte]
    38 0000002F B801000000              mov rax, 1
    39 00000034 E8(00000000)            call printf
    40 00000039 4883C408                add rsp, 8
    41                                  
    42 0000003D 49FFC6                  inc r14         ; Increase r14 by 1
    43 00000040 EBD4                    jmp output_loop ; Calling output_loop
    44                                  
    45                                  output_exit:
    46 00000042 B800000000              mov rax, 0
    47 00000047 48BF-                   mov rdi, newline    ; Print newline after output
    47 00000049 [0900000000000000] 
    48 00000051 E8(00000000)            call printf
    49                                  
    50 00000056 415E                    pop r14
    51 00000058 415D                    pop r13
    52 0000005A 415C                    pop r12
    53 0000005C 5D                      pop rbp
    54 0000005D C3                      ret
