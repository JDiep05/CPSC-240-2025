     1                                  ;*******************************************************************************************************************************
     2                                  ; Program name: "Arrays of Floating Point Numbers". This program takes user input's of floating point number and place them into an array.
     3                                  ; Copyright (C) 2025  Jonthan Diep                                                                                             *
     4                                  ;                                                                                                                              *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License    *
     6                                  ; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.        *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty  *
     8                                  ; of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.                *
     9                                  ; You should have received a copy of the GNU General Public License along with this program.  If not, see                      *
    10                                  ; <https://www.gnu.org/licenses/>.                                                                                             *
    11                                  ;*******************************************************************************************************************************
    12                                  
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ; Author information
    17                                  ;   Author name : Jonathan Diep
    18                                  ;   Author email: jonathon.dieppp@csu.fullerton.edu
    19                                  ;   CWID : 884973462
    20                                  ;   Class: 240-03 Section 03
    21                                  ; Program Information
    22                                  ;   Program Name: Arrays of Floating Point Numbers
    23                                  ;   Programming language: Two module in C, Six module in X86, and One module in bash.
    24                                  ;   Date program began: 2025-Feb-22
    25                                  ;   Date of last update: 2025-Feb-22
    26                                  ;   Files in this program: main.c, manager.asm, input_array.asm, output_array.asm, sum.asm, sort.asm, swap.asm, isfloat.asm, run.sh.
    27                                  ;   Testing: Alpha testing completed. All functions are correct.
    28                                  ;   Status: Ready for release to customers
    29                                  ;
    30                                  ;Purpose
    31                                  ;   This program takes user input's of floating point number and place them into an array.
    32                                  ;   The program will calculate the sum, the mean, and sort the array.
    33                                  ;
    34                                  ;This file:
    35                                  ;   File name: output_array.asm
    36                                  ;   Language: X86-64
    37                                  ;   Max page width: 124 columns
    38                                  ;   Assemble (standard): nasm -f elf64 -l output_array.lis -o output_array.o output_array.asm
    39                                  ;   Assemble (debug): nasm -f elf64 -gdwarf -l output_array.lis -o output_array.o output_array.asm
    40                                  ;   Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    41                                  ;   Prototype of this function: extern double output_array();
    42                                  ; 
    43                                  ;
    44                                  ;
    45                                  ;
    46                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    47                                  
    48                                  
    49                                  
    50                                  extern printf
    51                                  
    52                                  global output_array
    53                                  
    54                                  segment .data
    55 00000000 252E39662000            floatformat db "%.9f ", 0
    56 00000006 256400                  intformat db "%d", 0
    57                                  
    58 00000009 0A00                    newline db 10, 0
    59                                  
    60                                  segment .bss
    61                                      ; This segment is empty
    62                                  
    63                                  segment .text
    64                                  
    65                                  output_array:
    66                                  
    67                                  ; Backup GPRs
    68 00000000 55                      push rbp
    69 00000001 4889E5                  mov rbp, rsp
    70 00000004 4154                    push r12
    71 00000006 4155                    push r13
    72 00000008 4156                    push r14
    73                                  
    74 0000000A 4989FC                  mov r12, rdi    ; Storing address to r12
    75 0000000D 4989F5                  mov r13, rsi    ; Storing numbers of elements
    76 00000010 41BE00000000            mov r14, 0      ; Set r14 as counter for loop
    77                                  
    78                                  
    79                                  output_loop:
    80 00000016 4D39EE                  cmp r14, r13    ; Compare index with length
    81 00000019 7D27                    jge output_exit ; End loop if index < length
    82                                  
    83                                  ; Print current index
    84 0000001B 4883EC08                sub rsp, 8
    85 0000001F 48BF-                   mov rdi, floatformat
    85 00000021 [0000000000000000] 
    86 00000029 F2430F1004F4            movsd xmm0, [r12 + r14*8]   ; Moving current index from the selected address to xmm0 [Address + Index*byte]
    87 0000002F B801000000              mov rax, 1
    88 00000034 E8(00000000)            call printf
    89 00000039 4883C408                add rsp, 8
    90                                  
    91 0000003D 49FFC6                  inc r14             ; Increase r14 by 1
    92 00000040 EBD4                    jmp output_loop     ; Calling output_loop
    93                                  
    94                                  output_exit:
    95 00000042 B800000000              mov rax, 0
    96 00000047 48BF-                   mov rdi, newline    ; Print newline after output
    96 00000049 [0900000000000000] 
    97 00000051 E8(00000000)            call printf
    98                                  
    99 00000056 415E                    pop r14
   100 00000058 415D                    pop r13
   101 0000005A 415C                    pop r12
   102 0000005C 5D                      pop rbp
   103 0000005D C3                      ret
