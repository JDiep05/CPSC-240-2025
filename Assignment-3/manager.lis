     1                                  ;declaration
     2                                  
     3                                  extern printf
     4                                  
     5                                  extern scanf
     6                                  
     7                                  extern isfloat
     8                                  
     9                                  extern istriangle
    10                                  
    11                                  extern huron
    12                                  
    13                                  global manager
    14                                  
    15                                  segment .data
    16 00000000 0A506C656173652065-     prompt_for_sides db 10, "Please enter the lengths of three sides of a triangle: ", 0
    16 00000009 6E7465722074686520-
    16 00000012 6C656E67746873206F-
    16 0000001B 662074687265652073-
    16 00000024 69646573206F662061-
    16 0000002D 20747269616E676C65-
    16 00000036 3A2000             
    17 00000039 0A256C6620256C6620-     side_format db 10, "%lf %lf %lf", 0
    17 00000042 256C6600           
    18 00000046 0A5468616E6B20796F-     msg_1 db 10, "Thank you", 10, 
    18 0000004F 750A               
    19 00000051 0A496E76616C696420-     msg_2 db 10, "Invalid input. Please enter valid number.", 10, 0
    19 0000005A 696E7075742E20506C-
    19 00000063 6561736520656E7465-
    19 0000006C 722076616C6964206E-
    19 00000075 756D6265722E0A00   
    20 0000007D 0A546865736520696E-     msg_3 db 10, "These input have been tested and they are sides of a valid triangle.", 10, 0
    20 00000086 707574206861766520-
    20 0000008F 6265656E2074657374-
    20 00000098 656420616E64207468-
    20 000000A1 657920617265207369-
    20 000000AA 646573206F66206120-
    20 000000B3 76616C696420747269-
    20 000000BC 616E676C652E0A00   
    21 000000C4 0A546865204875726F-     msg_4 db 10, "The Huron formula will be applied to find the area."
    21 000000CD 6E20666F726D756C61-
    21 000000D6 2077696C6C20626520-
    21 000000DF 6170706C6965642074-
    21 000000E8 6F2066696E64207468-
    21 000000F1 6520617265612E     
    22 000000F8 0A5468652061726561-     msg_5 db 10, "The area is %.4lf sq units. This number will be returned to the caller module."
    22 00000101 20697320252E346C66-
    22 0000010A 20737120756E697473-
    22 00000113 2E2054686973206E75-
    22 0000011C 6D6265722077696C6C-
    22 00000125 206265207265747572-
    22 0000012E 6E656420746F207468-
    22 00000137 652063616C6C657220-
    22 00000140 6D6F64756C652E     
    23 00000147 0A256C660A00            floatformat db 10, "%lf", 10, 0
    24                                  
    25                                  segment .bss
    26                                  ;declared empty arrays
    27                                  
    28                                  align 64
    29 00000000 <res 00000340>          backup_storage_area resb 832
    30                                  
    31 00000340 <res 00000008>          side_1 resq 1   ; Reserving 1 byte for double input
    32 00000348 <res 00000008>          side_2 resq 1
    33 00000350 <res 00000008>          side_3 resq 1
    34                                  
    35                                  segment .text
    36                                  
    37                                  manager:
    38                                  
    39                                  ; backup GPRs
    40                                  ;backup GPRs
    41 00000000 55                      push rbp
    42 00000001 4889E5                  mov rbp, rsp
    43 00000004 53                      push rbx
    44 00000005 51                      push rcx
    45 00000006 52                      push rdx
    46 00000007 57                      push rdi
    47 00000008 56                      push rsi
    48 00000009 4150                    push r8
    49 0000000B 4151                    push r9
    50 0000000D 4152                    push r10
    51 0000000F 4153                    push r11
    52 00000011 4154                    push r12
    53 00000013 4155                    push r13
    54 00000015 4156                    push r14
    55 00000017 4157                    push r15
    56 00000019 9C                      pushf
    57                                  
    58                                  ; Backup other registers
    59 0000001A B807000000              mov rax, 7
    60 0000001F BA00000000              mov rdx, 0
    61 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
    62                                  
    63                                  ask_input:
    64 0000002C B800000000              mov rax, 0
    65 00000031 48BF-                   mov rdi, prompt_for_sides
    65 00000033 [0000000000000000] 
    66 0000003B E8(00000000)            call printf
    67                                  
    68 00000040 48BF-                   mov rdi, side_format
    68 00000042 [3900000000000000] 
    69 0000004A 48BE-                   mov rsi, side_1
    69 0000004C [4003000000000000] 
    70 00000054 48BA-                   mov rdx, side_2
    70 00000056 [4803000000000000] 
    71 0000005E 48B9-                   mov rcx, side_3
    71 00000060 [5003000000000000] 
    72 00000068 E8(00000000)            call scanf
    73                                  
    74 0000006D F2440F102425-           movsd xmm12, [side_1]
    74 00000073 [40030000]         
    75 00000077 F2440F102C25-           movsd xmm13, [side_2]
    75 0000007D [48030000]         
    76 00000081 F2440F103425-           movsd xmm14, [side_3]
    76 00000087 [50030000]         
    77                                  
    78 0000008B B801000000              mov rax, 1
    79 00000090 48BF-                   mov rdi, floatformat
    79 00000092 [4701000000000000] 
    80 0000009A F2410F10C4              movsd xmm0, xmm12
    81 0000009F E8(00000000)            call printf
    82                                  
    83 000000A4 B801000000              mov rax, 1
    84 000000A9 F2410F10C4              movsd xmm0, xmm12
    85 000000AE E8(00000000)            call isfloat
    86 000000B3 4883F800                cmp rax, 0
    87 000000B7 7468                    je invalid_input
    88                                  
    89 000000B9 B801000000              mov rax, 1
    90 000000BE 48BF-                   mov rdi, floatformat
    90 000000C0 [4701000000000000] 
    91 000000C8 F2410F10C5              movsd xmm0, xmm13
    92 000000CD E8(00000000)            call printf
    93                                  
    94 000000D2 B801000000              mov rax, 1
    95 000000D7 F2410F10C5              movsd xmm0, xmm13
    96 000000DC E8(00000000)            call isfloat
    97 000000E1 F2410F10C5              movsd xmm0, xmm13
    98 000000E6 4883F800                cmp rax, 0
    99 000000EA 7435                    je invalid_input
   100                                  
   101 000000EC B801000000              mov rax, 1
   102 000000F1 48BF-                   mov rdi, floatformat
   102 000000F3 [4701000000000000] 
   103 000000FB F2410F10C6              movsd xmm0, xmm14
   104 00000100 E8(00000000)            call printf
   105                                  
   106 00000105 B801000000              mov rax, 1
   107 0000010A F2410F10C6              movsd xmm0, xmm14
   108 0000010F E8(00000000)            call isfloat
   109 00000114 F2410F10C6              movsd xmm0, xmm14
   110 00000119 4883F800                cmp rax, 0
   111 0000011D 7402                    je invalid_input
   112                                  
   113 0000011F EB19                    jmp next
   114                                  
   115                                  invalid_input:
   116 00000121 B800000000              mov rax, 0
   117 00000126 48BF-                   mov rdi, msg_2
   117 00000128 [5100000000000000] 
   118 00000130 E8(00000000)            call printf
   119 00000135 E9F2FEFFFF              jmp ask_input
   120                                  
   121                                  next:
   122                                  
   123 0000013A F2410F10C4              movsd xmm0, xmm12
   124 0000013F F2410F10CD              movsd xmm1, xmm13
   125 00000144 F2410F10D6              movsd xmm2, xmm14
   126 00000149 E8(00000000)            call istriangle
   127 0000014E 4883F800                cmp rax, 0
   128 00000152 74CD                    je invalid_input
   129                                  
   130 00000154 B800000000              mov rax, 0
   131 00000159 48BF-                   mov rdi, msg_3
   131 0000015B [7D00000000000000] 
   132 00000163 E8(00000000)            call printf
   133                                  
   134 00000168 B800000000              mov rax, 0
   135 0000016D 48BF-                   mov rdi, msg_4
   135 0000016F [C400000000000000] 
   136 00000177 E8(00000000)            call printf
   137                                  
   138 0000017C B803000000              mov rax, 3
   139 00000181 F20F100425-             movsd xmm0, [side_1]
   139 00000186 [40030000]         
   140 0000018A F20F100C25-             movsd xmm1, [side_2]
   140 0000018F [48030000]         
   141 00000193 F20F101425-             movsd xmm2, [side_3]
   141 00000198 [50030000]         
   142 0000019C E8(00000000)            call huron
   143                                  
   144 000001A1 F2440F10F8              movsd xmm15, xmm0
   145                                  
   146 000001A6 B801000000              mov rax, 1
   147 000001AB 48BF-                   mov rdi, msg_5
   147 000001AD [F800000000000000] 
   148 000001B5 F2410F10C7              movsd xmm0, xmm15
   149 000001BA E8(00000000)            call printf
   150                                  
   151 000001BF B800000000              mov rax, 0
   152 000001C4 6A00                    push qword 0
   153 000001C6 F2440F113C24            movsd [rsp], xmm15
   154                                  
   155                                  ; Restoring registers
   156 000001CC B807000000              mov rax, 7
   157 000001D1 B800000000              mov rax, 0
   158 000001D6 0FAE2C25[00000000]      xrstor [backup_storage_area]
   159                                  
   160                                  ; Sending the area to main
   161 000001DE F20F100424              movsd xmm0, [rsp]   ; Passing rsp to xmm0, xmm0 will be returned
   162 000001E3 58                      pop rax
   163                                  
   164                                  ;Restore the GPRs
   165 000001E4 9D                      popf
   166 000001E5 415F                    pop r15
   167 000001E7 415E                    pop r14
   168 000001E9 415D                    pop r13
   169 000001EB 415C                    pop r12
   170 000001ED 415B                    pop r11
   171 000001EF 415A                    pop r10
   172 000001F1 4159                    pop r9
   173 000001F3 4158                    pop r8
   174 000001F5 5E                      pop rsi
   175 000001F6 5F                      pop rdi
   176 000001F7 5A                      pop rdx
   177 000001F8 59                      pop rcx
   178 000001F9 5B                      pop rbx
   179 000001FA 5D                      pop rbp
   180 000001FB C3                      ret
   181                                  
   182                                  
   183                                  
