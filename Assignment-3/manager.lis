     1                                  ;declaration
     2                                  
     3                                  extern printf
     4                                  
     5                                  extern atof
     6                                  
     7                                  extern scanf
     8                                  
     9                                  extern isfloat
    10                                  
    11                                  extern istriangle
    12                                  
    13                                  extern huron
    14                                  
    15                                  global manager
    16                                  
    17                                  segment .data
    18 00000000 0A506C656173652065-     prompt_for_sides db 10, "Please enter the lengths of three sides of a triangle: ", 0
    18 00000009 6E7465722074686520-
    18 00000012 6C656E67746873206F-
    18 0000001B 662074687265652073-
    18 00000024 69646573206F662061-
    18 0000002D 20747269616E676C65-
    18 00000036 3A2000             
    19 00000039 257320257320257300      string_format db "%s %s %s", 0
    20 00000042 256620256620256600      sides_format db "%f %f %f", 0
    21 0000004B 0A256C6600              float_format db 10, "%lf", 0
    22 00000050 0A5468616E6B20796F-     msg_1 db 10, "Thank you", 10, 
    22 00000059 750A               
    23 0000005B 0A496E76616C696420-     msg_2 db 10, "Invalid input. Please enter valid number.", 10, 0
    23 00000064 696E7075742E20506C-
    23 0000006D 6561736520656E7465-
    23 00000076 722076616C6964206E-
    23 0000007F 756D6265722E0A00   
    24 00000087 0A546865736520696E-     msg_3 db 10, "These input have been tested and they are sides of a valid triangle.", 10, 0
    24 00000090 707574206861766520-
    24 00000099 6265656E2074657374-
    24 000000A2 656420616E64207468-
    24 000000AB 657920617265207369-
    24 000000B4 646573206F66206120-
    24 000000BD 76616C696420747269-
    24 000000C6 616E676C652E0A00   
    25 000000CE 0A546865204875726F-     msg_4 db 10, "The Huron formula will be applied to find the area."
    25 000000D7 6E20666F726D756C61-
    25 000000E0 2077696C6C20626520-
    25 000000E9 6170706C6965642074-
    25 000000F2 6F2066696E64207468-
    25 000000FB 6520617265612E     
    26 00000102 0A5468652061726561-     msg_5 db 10, "The area is %.4lf sq units. This number will be returned to the caller module.", 10, 0
    26 0000010B 20697320252E346C66-
    26 00000114 20737120756E697473-
    26 0000011D 2E2054686973206E75-
    26 00000126 6D6265722077696C6C-
    26 0000012F 206265207265747572-
    26 00000138 6E656420746F207468-
    26 00000141 652063616C6C657220-
    26 0000014A 6D6F64756C652E0A00 
    27                                  
    28                                  segment .bss
    29                                  ;declared empty arrays
    30                                  
    31                                  align 64
    32 00000000 <res 00000340>          backup_storage_area resb 832
    33                                  
    34 00000340 <res 00000020>          side1 resb 32   ; Reserving 1 byte for double input
    35 00000360 <res 00000020>          side2 resb 32
    36 00000380 <res 00000020>          side3 resb 32
    37                                  
    38                                  segment .text
    39                                  
    40                                  manager:
    41                                  
    42                                  ; backup GPRs
    43                                  ;backup GPRs
    44 00000000 55                      push rbp
    45 00000001 4889E5                  mov rbp, rsp
    46 00000004 53                      push rbx
    47 00000005 51                      push rcx
    48 00000006 52                      push rdx
    49 00000007 57                      push rdi
    50 00000008 56                      push rsi
    51 00000009 4150                    push r8
    52 0000000B 4151                    push r9
    53 0000000D 4152                    push r10
    54 0000000F 4153                    push r11
    55 00000011 4154                    push r12
    56 00000013 4155                    push r13
    57 00000015 4156                    push r14
    58 00000017 4157                    push r15
    59 00000019 9C                      pushf
    60                                  
    61                                  ; Backup other registers
    62 0000001A B807000000              mov rax, 7
    63 0000001F BA00000000              mov rdx, 0
    64 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
    65                                  
    66                                  ask_input:
    67 0000002C B800000000              mov rax, 0
    68 00000031 48BF-                   mov rdi, prompt_for_sides
    68 00000033 [0000000000000000] 
    69 0000003B E8(00000000)            call printf
    70                                  
    71                                  ; Read three numbers as strings
    72 00000040 48BF-                   mov rdi, string_format  ; "%s %s %s"
    72 00000042 [3900000000000000] 
    73 0000004A 48BE-                   mov rsi, side1        ; First buffer
    73 0000004C [4003000000000000] 
    74 00000054 48BA-                   mov rdx, side2        ; Second buffer
    74 00000056 [6003000000000000] 
    75 0000005E 48B9-                   mov rcx, side3        ; Third buffer
    75 00000060 [8003000000000000] 
    76 00000068 E8(00000000)            call scanf
    77                                  
    78                                  
    79                                  ; Validate and convert side1
    80 0000006D 48BF-                   mov rdi, side1
    80 0000006F [4003000000000000] 
    81 00000077 E8(00000000)            call isfloat
    82 0000007C 4883F800                cmp rax, 0
    83 00000080 7468                    je invalid_input
    84 00000082 48BF-                   mov rdi, side1
    84 00000084 [4003000000000000] 
    85 0000008C E8(00000000)            call atof
    86 00000091 F2440F10E0              movsd xmm12, xmm0
    87                                  
    88                                  ; Validate and convert side2
    89 00000096 48BF-                   mov rdi, side2
    89 00000098 [6003000000000000] 
    90 000000A0 E8(00000000)            call isfloat
    91 000000A5 4883F800                cmp rax, 0
    92 000000A9 743F                    je invalid_input
    93 000000AB 48BF-                   mov rdi, side2
    93 000000AD [6003000000000000] 
    94 000000B5 E8(00000000)            call atof
    95 000000BA F2440F10E8              movsd xmm13, xmm0
    96                                  
    97                                  ; Validate and convert side3
    98 000000BF 48BF-                   mov rdi, side3
    98 000000C1 [8003000000000000] 
    99 000000C9 E8(00000000)            call isfloat
   100 000000CE 4883F800                cmp rax, 0
   101 000000D2 7416                    je invalid_input
   102 000000D4 48BF-                   mov rdi, side3
   102 000000D6 [8003000000000000] 
   103 000000DE E8(00000000)            call atof
   104 000000E3 F2440F10F0              movsd xmm14, xmm0
   105                                  
   106 000000E8 EB19                    jmp next
   107                                  
   108                                  invalid_input:
   109 000000EA B800000000              mov rax, 0
   110 000000EF 48BF-                   mov rdi, msg_2
   110 000000F1 [5B00000000000000] 
   111 000000F9 E8(00000000)            call printf
   112 000000FE E929FFFFFF              jmp ask_input
   113                                  
   114                                  next:
   115 00000103 B803000000              mov rax, 3
   116 00000108 F2410F10C4              movsd xmm0, xmm12
   117 0000010D F2410F10CD              movsd xmm1, xmm13
   118 00000112 F2410F10D6              movsd xmm2, xmm14
   119 00000117 E8(00000000)            call istriangle
   120 0000011C 4883F800                cmp rax, 0
   121 00000120 74C8                    je invalid_input
   122                                  
   123 00000122 B800000000              mov rax, 0
   124 00000127 48BF-                   mov rdi, msg_3
   124 00000129 [8700000000000000] 
   125 00000131 E8(00000000)            call printf
   126                                  
   127 00000136 B800000000              mov rax, 0
   128 0000013B 48BF-                   mov rdi, msg_4
   128 0000013D [CE00000000000000] 
   129 00000145 E8(00000000)            call printf
   130                                  
   131 0000014A B803000000              mov rax, 3
   132 0000014F F2410F10C4              movsd xmm0, xmm12
   133 00000154 F2410F10CD              movsd xmm1, xmm13
   134 00000159 F2410F10D6              movsd xmm2, xmm14
   135 0000015E E8(00000000)            call huron
   136                                  
   137 00000163 F2440F10F8              movsd xmm15, xmm0
   138                                  
   139 00000168 B801000000              mov rax, 1
   140 0000016D 48BF-                   mov rdi, msg_5
   140 0000016F [0201000000000000] 
   141 00000177 F2410F10C7              movsd xmm0, xmm15
   142 0000017C E8(00000000)            call printf
   143                                  
   144 00000181 B800000000              mov rax, 0
   145 00000186 6A00                    push qword 0
   146 00000188 F2440F113C24            movsd [rsp], xmm15
   147                                  
   148                                  ; Restoring registers
   149 0000018E B807000000              mov rax, 7
   150 00000193 B800000000              mov rax, 0
   151 00000198 0FAE2C25[00000000]      xrstor [backup_storage_area]
   152                                  
   153                                  ; Sending the area to main
   154 000001A0 F20F100424              movsd xmm0, [rsp]   ; Passing rsp to xmm0, xmm0 will be returned
   155 000001A5 58                      pop rax
   156                                  
   157                                  ;Restore the GPRs
   158 000001A6 9D                      popf
   159 000001A7 415F                    pop r15
   160 000001A9 415E                    pop r14
   161 000001AB 415D                    pop r13
   162 000001AD 415C                    pop r12
   163 000001AF 415B                    pop r11
   164 000001B1 415A                    pop r10
   165 000001B3 4159                    pop r9
   166 000001B5 4158                    pop r8
   167 000001B7 5E                      pop rsi
   168 000001B8 5F                      pop rdi
   169 000001B9 5A                      pop rdx
   170 000001BA 59                      pop rcx
   171 000001BB 5B                      pop rbx
   172 000001BC 5D                      pop rbp
   173 000001BD C3                      ret
   174                                  
   175                                  
   176                                  
