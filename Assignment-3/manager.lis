     1                                  ;declaration
     2                                  
     3                                  extern printf
     4                                  
     5                                  extern atof
     6                                  
     7                                  extern scanf
     8                                  
     9                                  extern isfloat
    10                                  
    11                                  extern istriangle
    12                                  
    13                                  extern huron
    14                                  
    15                                  %include "triangle.inc" 
     1                              <1> %macro print_str 1
     2                              <1>     mov rdi, %1    ; Address to print author_info
     3                              <1>     call printf    ; Call printf function
     4                              <1> %endmacro
    16                                  
    17                                  global manager
    18                                  
    19                                  segment .data
    23 00000000 0A546869732070726F-     author_info db 10, "This program is brought to you as a courtesy of", 10 ,                    "Author: Jonathan Diep", 10 ,                     "CWID: 884973462", 10 ,                     "Email: jonathon.dieppp@csu.fullerton.edu", 10, 0
    23 00000009 6772616D2069732062-
    23 00000012 726F7567687420746F-
    23 0000001B 20796F752061732061-
    23 00000024 20636F757274657379-
    23 0000002D 206F660A417574686F-
    23 00000036 723A204A6F6E617468-
    23 0000003F 616E20446965700A43-
    23 00000048 5749443A2038383439-
    23 00000051 37333436320A456D61-
    23 0000005A 696C3A206A6F6E6174-
    23 00000063 686F6E2E6469657070-
    23 0000006C 70406373752E66756C-
    23 00000075 6C6572746F6E2E6564-
    23 0000007E 750A00             
    24                                  
    25                                  
    26 00000081 0A506C656173652065-     prompt_for_sides db 10, "Please enter the lengths of three sides of a triangle: ", 0
    26 0000008A 6E7465722074686520-
    26 00000093 6C656E67746873206F-
    26 0000009C 662074687265652073-
    26 000000A5 69646573206F662061-
    26 000000AE 20747269616E676C65-
    26 000000B7 3A2000             
    27 000000BA 257320257320257300      string_format db "%s %s %s", 0
    28 000000C3 256620256620256600      sides_format db "%f %f %f", 0
    29 000000CC 0A256C6600              float_format db 10, "%lf", 0
    30 000000D1 0A5468616E6B20796F-     msg_1 db 10, "Thank you", 10, 
    30 000000DA 750A               
    31 000000DC 0A4572726F7220696E-     msg_2 db 10, "Error input try again", 10, 0
    31 000000E5 707574207472792061-
    31 000000EE 6761696E0A00       
    32 000000F4 0A546865736520696E-     msg_3 db 10, "These input have been tested and they are sides of a valid triangle.", 10, 0
    32 000000FD 707574206861766520-
    32 00000106 6265656E2074657374-
    32 0000010F 656420616E64207468-
    32 00000118 657920617265207369-
    32 00000121 646573206F66206120-
    32 0000012A 76616C696420747269-
    32 00000133 616E676C652E0A00   
    33 0000013B 0A546865204875726F-     msg_4 db 10, "The Huron formula will be applied to find the area.", 10, 0
    33 00000144 6E20666F726D756C61-
    33 0000014D 2077696C6C20626520-
    33 00000156 6170706C6965642074-
    33 0000015F 6F2066696E64207468-
    33 00000168 6520617265612E0A00 
    34 00000171 0A5468652061726561-     msg_5 db 10, "The area is %.4lf sq units. This number will be returned to the caller module.", 10, 0
    34 0000017A 20697320252E346C66-
    34 00000183 20737120756E697473-
    34 0000018C 2E2054686973206E75-
    34 00000195 6D6265722077696C6C-
    34 0000019E 206265207265747572-
    34 000001A7 6E656420746F207468-
    34 000001B0 652063616C6C657220-
    34 000001B9 6D6F64756C652E0A00 
    35                                  
    36                                  segment .bss
    37                                  ;declared empty arrays
    38                                  
    39                                  align 64
    40 00000000 <res 00000340>          backup_storage_area resb 832
    41                                  
    42 00000340 <res 00000020>          side1 resb 32   ; Reserving 1 byte for double input
    43 00000360 <res 00000020>          side2 resb 32
    44 00000380 <res 00000020>          side3 resb 32
    45                                  
    46                                  segment .text
    47                                  
    48                                  manager:
    49                                  print_str author_info  ; Use macro to print author_info
    49 00000000 48BF-               <1>  mov rdi, %1
    49 00000002 [0000000000000000]  <1>
    49 0000000A E8(00000000)        <1>  call printf
    50                                  ; Backup GPRs and other registers
    51 0000000F 55                      push rbp
    52 00000010 4889E5                  mov rbp, rsp
    53 00000013 53                      push rbx
    54 00000014 51                      push rcx
    55 00000015 52                      push rdx
    56 00000016 57                      push rdi
    57 00000017 56                      push rsi
    58 00000018 4150                    push r8
    59 0000001A 4151                    push r9
    60 0000001C 4152                    push r10
    61 0000001E 4153                    push r11
    62 00000020 4154                    push r12
    63 00000022 4155                    push r13
    64 00000024 4156                    push r14
    65 00000026 4157                    push r15
    66 00000028 9C                      pushf
    67                                  
    68 00000029 B807000000              mov rax, 7
    69 0000002E BA00000000              mov rdx, 0
    70 00000033 0FAE2425[00000000]      xsave [backup_storage_area]
    71                                  
    72                                  ask_input:
    73 0000003B B800000000              mov rax, 0
    74 00000040 48BF-                   mov rdi, prompt_for_sides
    74 00000042 [8100000000000000] 
    75 0000004A E8(00000000)            call printf
    76                                  
    77                                  ; Read three numbers as strings
    78 0000004F 48BF-                   mov rdi, string_format  ; "%s %s %s"
    78 00000051 [BA00000000000000] 
    79 00000059 48BE-                   mov rsi, side1        ; First buffer
    79 0000005B [4003000000000000] 
    80 00000063 48BA-                   mov rdx, side2        ; Second buffer
    80 00000065 [6003000000000000] 
    81 0000006D 48B9-                   mov rcx, side3        ; Third buffer
    81 0000006F [8003000000000000] 
    82 00000077 E8(00000000)            call scanf
    83                                  
    84                                  ; Validate and convert side1
    85 0000007C 48BF-                   mov rdi, side1
    85 0000007E [4003000000000000] 
    86 00000086 E8(00000000)            call isfloat
    87 0000008B 4883F800                cmp rax, 0
    88 0000008F 0F8482000000            je invalid_input
    89 00000095 48BF-                   mov rdi, side1
    89 00000097 [4003000000000000] 
    90 0000009F E8(00000000)            call atof
    91 000000A4 F2440F10E0              movsd xmm12, xmm0
    92                                  
    93                                  ; Validate and convert side2
    94 000000A9 48BF-                   mov rdi, side2
    94 000000AB [6003000000000000] 
    95 000000B3 E8(00000000)            call isfloat
    96 000000B8 4883F800                cmp rax, 0
    97 000000BC 7459                    je invalid_input
    98 000000BE 48BF-                   mov rdi, side2
    98 000000C0 [6003000000000000] 
    99 000000C8 E8(00000000)            call atof
   100 000000CD F2440F10E8              movsd xmm13, xmm0
   101                                  
   102                                  ; Validate and convert side3
   103 000000D2 48BF-                   mov rdi, side3
   103 000000D4 [8003000000000000] 
   104 000000DC E8(00000000)            call isfloat
   105 000000E1 4883F800                cmp rax, 0
   106 000000E5 7430                    je invalid_input
   107 000000E7 48BF-                   mov rdi, side3
   107 000000E9 [8003000000000000] 
   108 000000F1 E8(00000000)            call atof
   109 000000F6 F2440F10F0              movsd xmm14, xmm0
   110                                  
   111                                  ; Call istriangle to validate the sides
   112 000000FB F2410F10C4              movsd xmm0, xmm12
   113 00000100 F2410F10CD              movsd xmm1, xmm13
   114 00000105 F2410F10D6              movsd xmm2, xmm14
   115 0000010A E8(00000000)            call istriangle
   116 0000010F 4883F800                cmp rax, 0
   117 00000113 7402                    je invalid_input
   118                                  
   119 00000115 EB19                    jmp next
   120                                  
   121                                  invalid_input:
   122 00000117 B800000000              mov rax, 0
   123 0000011C 48BF-                   mov rdi, msg_2
   123 0000011E [DC00000000000000] 
   124 00000126 E8(00000000)            call printf
   125 0000012B E90BFFFFFF              jmp ask_input
   126                                  
   127                                  next:
   128 00000130 B800000000              mov rax, 0
   129 00000135 48BF-                   mov rdi, msg_3
   129 00000137 [F400000000000000] 
   130 0000013F E8(00000000)            call printf
   131                                  
   132 00000144 B800000000              mov rax, 0
   133 00000149 48BF-                   mov rdi, msg_4
   133 0000014B [3B01000000000000] 
   134 00000153 E8(00000000)            call printf
   135                                  
   136                                  
   137                                  ; Call huron to calculate the area
   138 00000158 F2410F10C4              movsd xmm0, xmm12
   139 0000015D F2410F10CD              movsd xmm1, xmm13
   140 00000162 F2410F10D6              movsd xmm2, xmm14
   141 00000167 E8(00000000)            call huron
   142 0000016C F2440F10F8              movsd xmm15, xmm0
   143                                  
   144                                  ; Print the area
   145 00000171 B801000000              mov rax, 1
   146 00000176 48BF-                   mov rdi, msg_5
   146 00000178 [7101000000000000] 
   147 00000180 F2410F10C7              movsd xmm0, xmm15
   148 00000185 E8(00000000)            call printf
   149                                  
   150                                  ; Return the area to the caller
   151 0000018A B800000000              mov rax, 0
   152 0000018F 6A00                    push qword 0
   153 00000191 F2440F113C24            movsd [rsp], xmm15
   154                                  
   155                                  ; Restore registers
   156 00000197 B807000000              mov rax, 7
   157 0000019C B800000000              mov rax, 0
   158 000001A1 0FAE2C25[00000000]      xrstor [backup_storage_area]
   159                                  
   160                                  ; Return the area in xmm0
   161 000001A9 F20F100424              movsd xmm0, [rsp]
   162 000001AE 58                      pop rax
   163                                  
   164                                  ; Restore GPRs
   165 000001AF 9D                      popf
   166 000001B0 415F                    pop r15
   167 000001B2 415E                    pop r14
   168 000001B4 415D                    pop r13
   169 000001B6 415C                    pop r12
   170 000001B8 415B                    pop r11
   171 000001BA 415A                    pop r10
   172 000001BC 4159                    pop r9
   173 000001BE 4158                    pop r8
   174 000001C0 5E                      pop rsi
   175 000001C1 5F                      pop rdi
   176 000001C2 5A                      pop rdx
   177 000001C3 59                      pop rcx
   178 000001C4 5B                      pop rbx
   179 000001C5 5D                      pop rbp
   180 000001C6 C3                      ret
