     1                                  ;*******************************************************************************************************************************
     2                                  ; Program name: "Huron's Triangle". This program takes user input's of sides to create a triangle and output the area of the triangle.
     3                                  ; Copyright (C) 2025  Jonthan Diep                                                                                             *
     4                                  ;                                                                                                                              *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License    *
     6                                  ; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.        *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty  *
     8                                  ; of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.                *
     9                                  ; You should have received a copy of the GNU General Public License along with this program.  If not, see                      *
    10                                  ; <https://www.gnu.org/licenses/>.                                                                                             *
    11                                  ;*******************************************************************************************************************************
    12                                  
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ; Author information
    17                                  ;   Author name : Jonathan Diep
    18                                  ;   Author email: jonathon.dieppp@csu.fullerton.edu
    19                                  ;   CWID : 884973462
    20                                  ;   Class: 240-03 Section 03
    21                                  ; Program Information
    22                                  ;   Program Name: Huron's Triangle
    23                                  ;   Programming language: One module in C, Four module in X86, and One module in bash.
    24                                  ;   Date program began: 2025-Mar-03
    25                                  ;   Date of last update: 2025-Mar-08
    26                                  ;   Files in this program: triangle.c, huron.asm, isfloat.asm, istriangle.asm, manager.asm, r.sh
    27                                  ;   Testing: Alpha testing completed. All functions are correct.
    28                                  ;   Status: Ready for release to customers
    29                                  ;
    30                                  ;Purpose
    31                                  ;   This program takes three number inputs as sides to create a valid triangle
    32                                  ;   The program will calculate the area of the triangle
    33                                  ;
    34                                  ;This file:
    35                                  ;   File name: manager.asm
    36                                  ;   Language: X86-64
    37                                  ;   Max page width: 124 columns
    38                                  ;   Assemble (standard): nasm -f elf64 -l manager.lis -o manager.o manager.asm
    39                                  ;   Assemble (debug): nasm -f elf64 -gdwarf -l manager.lis -o manager.o manager.asm
    40                                  ;   Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    41                                  ;   Prototype of this function: extern double manager();
    42                                  ; 
    43                                  ;
    44                                  ;
    45                                  ;
    46                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    47                                  
    48                                  
    49                                  
    50                                  ;declaration
    51                                  
    52                                  extern printf
    53                                  
    54                                  extern atof
    55                                  
    56                                  extern scanf
    57                                  
    58                                  extern isfloat
    59                                  
    60                                  extern istriangle
    61                                  
    62                                  extern huron
    63                                  
    64                                  %include "triangle.inc" 
     1                              <1> %macro print_str 1
     2                              <1>     mov rdi, %1    ; Address to print author_info
     3                              <1>     call printf    ; Call printf function
     4                              <1> %endmacro
    65                                  
    66                                  global manager
    67                                  
    68                                  segment .data
    72 00000000 0A546869732070726F-     author_info db 10, "This program is brought to you as a courtesy of", 10 ,                    "Author: Jonathan Diep", 10 ,                     "CWID: 884973462", 10 ,                     "Email: jonathon.dieppp@csu.fullerton.edu", 10, 0
    72 00000009 6772616D2069732062-
    72 00000012 726F7567687420746F-
    72 0000001B 20796F752061732061-
    72 00000024 20636F757274657379-
    72 0000002D 206F660A417574686F-
    72 00000036 723A204A6F6E617468-
    72 0000003F 616E20446965700A43-
    72 00000048 5749443A2038383439-
    72 00000051 37333436320A456D61-
    72 0000005A 696C3A206A6F6E6174-
    72 00000063 686F6E2E6469657070-
    72 0000006C 70406373752E66756C-
    72 00000075 6C6572746F6E2E6564-
    72 0000007E 750A00             
    73                                  
    74 00000081 0A506C656173652065-     prompt_for_sides db 10, "Please enter the lengths of three sides of a triangle: ", 0
    74 0000008A 6E7465722074686520-
    74 00000093 6C656E67746873206F-
    74 0000009C 662074687265652073-
    74 000000A5 69646573206F662061-
    74 000000AE 20747269616E676C65-
    74 000000B7 3A2000             
    75 000000BA 257320257320257300      string_format db "%s %s %s", 0
    76 000000C3 256620256620256600      sides_format db "%f %f %f", 0
    77 000000CC 0A256C6600              float_format db 10, "%lf", 0
    78 000000D1 0A5468616E6B20796F-     msg_1 db 10, "Thank you.", 10, 0
    78 000000DA 752E0A00           
    79 000000DE 4572726F7220696E70-     msg_2 db "Error input try again", 10, 0
    79 000000E7 757420747279206167-
    79 000000F0 61696E0A00         
    80 000000F5 0A546865736520696E-     msg_3 db 10, "These input have been tested and they are sides of a valid triangle.", 10, 0
    80 000000FE 707574206861766520-
    80 00000107 6265656E2074657374-
    80 00000110 656420616E64207468-
    80 00000119 657920617265207369-
    80 00000122 646573206F66206120-
    80 0000012B 76616C696420747269-
    80 00000134 616E676C652E0A00   
    81 0000013C 0A546865204875726F-     msg_4 db 10, "The Huron formula will be applied to find the area.", 10, 0
    81 00000145 6E20666F726D756C61-
    81 0000014E 2077696C6C20626520-
    81 00000157 6170706C6965642074-
    81 00000160 6F2066696E64207468-
    81 00000169 6520617265612E0A00 
    82 00000172 0A5468652061726561-     msg_5 db 10, "The area is %.4lf sq units. This number will be returned to the caller module.", 10, 0
    82 0000017B 20697320252E346C66-
    82 00000184 20737120756E697473-
    82 0000018D 2E2054686973206E75-
    82 00000196 6D6265722077696C6C-
    82 0000019F 206265207265747572-
    82 000001A8 6E656420746F207468-
    82 000001B1 652063616C6C657220-
    82 000001BA 6D6F64756C652E0A00 
    83                                  
    84                                  segment .bss
    85                                  ;declared empty arrays
    86                                  
    87                                  align 64
    88 00000000 <res 00000340>          backup_storage_area resb 832
    89                                  
    90 00000340 <res 00000020>          side1 resb 32   ; Reserving 1 byte for double input
    91 00000360 <res 00000020>          side2 resb 32
    92 00000380 <res 00000020>          side3 resb 32
    93                                  
    94                                  segment .text
    95                                  
    96                                  manager:
    97                                  print_str author_info  ; Use macro to print author_info
    97 00000000 48BF-               <1>  mov rdi, %1
    97 00000002 [0000000000000000]  <1>
    97 0000000A E8(00000000)        <1>  call printf
    98                                  ; Backup GPRs and other registers
    99 0000000F 55                      push rbp
   100 00000010 4889E5                  mov rbp, rsp
   101 00000013 53                      push rbx
   102 00000014 51                      push rcx
   103 00000015 52                      push rdx
   104 00000016 57                      push rdi
   105 00000017 56                      push rsi
   106 00000018 4150                    push r8
   107 0000001A 4151                    push r9
   108 0000001C 4152                    push r10
   109 0000001E 4153                    push r11
   110 00000020 4154                    push r12
   111 00000022 4155                    push r13
   112 00000024 4156                    push r14
   113 00000026 4157                    push r15
   114 00000028 9C                      pushf
   115                                  
   116 00000029 B807000000              mov rax, 7
   117 0000002E BA00000000              mov rdx, 0
   118 00000033 0FAE2425[00000000]      xsave [backup_storage_area]
   119                                  
   120                                  ask_input:
   121 0000003B B800000000              mov rax, 0
   122 00000040 48BF-                   mov rdi, prompt_for_sides
   122 00000042 [8100000000000000] 
   123 0000004A E8(00000000)            call printf
   124                                  
   125                                  ; Read three numbers as strings
   126 0000004F 48BF-                   mov rdi, string_format  ; "%s %s %s"
   126 00000051 [BA00000000000000] 
   127 00000059 48BE-                   mov rsi, side1          ; First side
   127 0000005B [4003000000000000] 
   128 00000063 48BA-                   mov rdx, side2          ; Second side
   128 00000065 [6003000000000000] 
   129 0000006D 48B9-                   mov rcx, side3          ; Third side
   129 0000006F [8003000000000000] 
   130 00000077 E8(00000000)            call scanf
   131                                  
   132                                  ; Validate and convert side1
   133 0000007C 48BF-                   mov rdi, side1          ; Passing side1 as argu for isfloat function
   133 0000007E [4003000000000000] 
   134 00000086 E8(00000000)            call isfloat            ; Function to check if argu is a float-point number
   135 0000008B 4883F800                cmp rax, 0              ; If returned false will prompt invalid_msg
   136 0000008F 0F8487000000            je invalid_input        ; Jump to invalid_input block
   137 00000095 48BF-                   mov rdi, side1          ; Passing side1 as argu for string conversion into float-point number
   137 00000097 [4003000000000000] 
   138 0000009F E8(00000000)            call atof               ; Function to convert string into float-point number
   139 000000A4 F2440F10E0              movsd xmm12, xmm0       ; Saving side1 into a non-violatile register
   140                                  
   141                                  ; Validate and convert side2
   142 000000A9 48BF-                   mov rdi, side2          ; Passing side2 as argu for isfloat function
   142 000000AB [6003000000000000] 
   143 000000B3 E8(00000000)            call isfloat            ; Function to check if argu is a float-point number
   144 000000B8 4883F800                cmp rax, 0              ; If returned false will prompt invalid_msg
   145 000000BC 745E                    je invalid_input        ; Jump to invalid_input block
   146 000000BE 48BF-                   mov rdi, side2          ; Passing side2 as argu for string conversion into float-point number
   146 000000C0 [6003000000000000] 
   147 000000C8 E8(00000000)            call atof               ; Function to convert string into float-point number
   148 000000CD F2440F10E8              movsd xmm13, xmm0       ; Saving side2 into a non-violatile register
   149                                  
   150                                  ; Validate and convert side3
   151 000000D2 48BF-                   mov rdi, side3          ; Passing side3 as argu for isfloat function
   151 000000D4 [8003000000000000] 
   152 000000DC E8(00000000)            call isfloat            ; Function to check if argu is a float-point number
   153 000000E1 4883F800                cmp rax, 0              ; If returned false will prompt invalid_msg
   154 000000E5 7435                    je invalid_input        ; Jump to invalid_input block
   155 000000E7 48BF-                   mov rdi, side3          ; Passing side3 as argu for string conversion into float-point number
   155 000000E9 [8003000000000000] 
   156 000000F1 E8(00000000)            call atof               ; Function to convert string into float-point number
   157 000000F6 F2440F10F0              movsd xmm14, xmm0       ; Saving side3 into a non-violatile register
   158                                  
   159                                  ; Call istriangle to validate the sides
   160 000000FB B803000000              mov rax, 3
   161 00000100 F2410F10C4              movsd xmm0, xmm12       ; Passing side1
   162 00000105 F2410F10CD              movsd xmm1, xmm13       ; Passing side2
   163 0000010A F2410F10D6              movsd xmm2, xmm14       ; Passing side3
   164 0000010F E8(00000000)            call istriangle         ; Function using the three side args to check if the side make a vaild triangle
   165 00000114 4883F801                cmp rax, 1              ; If returned false will prompt invalid_msg
   166 00000118 7502                    jne invalid_input       ; Jump to invalid_input block
   167 0000011A EB19                    jmp next
   168                                  
   169                                  invalid_input:
   170 0000011C B800000000              mov rax, 0
   171 00000121 48BF-                   mov rdi, msg_2          ; Display invalid_msg and prompt for re-input
   171 00000123 [DE00000000000000] 
   172 0000012B E8(00000000)            call printf
   173 00000130 E906FFFFFF              jmp ask_input           ; Loop back to input
   174                                  
   175                                  next:
   176 00000135 B800000000              mov rax, 0
   177 0000013A 48BF-                   mov rdi, msg_3          ; Display thank you msg
   177 0000013C [F500000000000000] 
   178 00000144 E8(00000000)            call printf
   179                                  
   180 00000149 B800000000              mov rax, 0
   181 0000014E 48BF-                   mov rdi, msg_4          ; Display msg for Heron's formula
   181 00000150 [3C01000000000000] 
   182 00000158 E8(00000000)            call printf
   183                                  
   184                                  ; Call huron to calculate the area
   185 0000015D F2410F10C4              movsd xmm0, xmm12       ; Passing side1
   186 00000162 F2410F10CD              movsd xmm1, xmm13       ; Passing side2
   187 00000167 F2410F10D6              movsd xmm2, xmm14       ; Passing side3
   188 0000016C E8(00000000)            call huron              ; Function using Heron's formula to calculate for triangle's area with the three sides
   189 00000171 F2440F10F8              movsd xmm15, xmm0       ; Saving area into non-violatile register
   190                                  
   191                                  ; Print the area
   192 00000176 B801000000              mov rax, 1              ; Passing one float-point value
   193 0000017B 48BF-                   mov rdi, msg_5          ; Display triangle's area msg
   193 0000017D [7201000000000000] 
   194 00000185 F2410F10C7              movsd xmm0, xmm15       ; Pass xmm15 to xmm0 to call printf
   195 0000018A E8(00000000)            call printf
   196                                  
   197                                  ; Return the area to the caller
   198 0000018F B800000000              mov rax, 0
   199 00000194 6A00                    push qword 0            ; Reserving 8 bytes to push triangle's area
   200 00000196 F2440F113C24            movsd [rsp], xmm15      ; Saving xmm15 into [rsp] (area)
   201                                  
   202                                  ; Restore registers
   203 0000019C B807000000              mov rax, 7
   204 000001A1 B800000000              mov rax, 0
   205 000001A6 0FAE2C25[00000000]      xrstor [backup_storage_area]
   206                                  
   207                                  ; Return the area in xmm0
   208 000001AE F20F100424              movsd xmm0, [rsp]       ; Moving [rsp] to xmm0 to return to main
   209 000001B3 58                      pop rax
   210                                  
   211                                  ; Restore GPRs
   212 000001B4 9D                      popf
   213 000001B5 415F                    pop r15
   214 000001B7 415E                    pop r14
   215 000001B9 415D                    pop r13
   216 000001BB 415C                    pop r12
   217 000001BD 415B                    pop r11
   218 000001BF 415A                    pop r10
   219 000001C1 4159                    pop r9
   220 000001C3 4158                    pop r8
   221 000001C5 5E                      pop rsi
   222 000001C6 5F                      pop rdi
   223 000001C7 5A                      pop rdx
   224 000001C8 59                      pop rcx
   225 000001C9 5B                      pop rbx
   226 000001CA 5D                      pop rbp
   227 000001CB C3                      ret
