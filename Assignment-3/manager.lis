     1                                  ;declaration
     2                                  
     3                                  extern printf
     4                                  
     5                                  extern atof
     6                                  
     7                                  extern scanf
     8                                  
     9                                  extern isfloat
    10                                  
    11                                  extern istriangle
    12                                  
    13                                  extern huron
    14                                  
    15                                  global manager
    16                                  
    17                                  segment .data
    18 00000000 0A506C656173652065-     prompt_for_sides db 10, "Please enter the lengths of three sides of a triangle: ", 0
    18 00000009 6E7465722074686520-
    18 00000012 6C656E67746873206F-
    18 0000001B 662074687265652073-
    18 00000024 69646573206F662061-
    18 0000002D 20747269616E676C65-
    18 00000036 3A2000             
    19 00000039 257320257320257300      scan_format db "%s %s %s", 0
    20 00000042 0A256C6600              float_format db 10, "%lf", 0
    21 00000047 0A5468616E6B20796F-     msg_1 db 10, "Thank you", 10, 
    21 00000050 750A               
    22 00000052 0A496E76616C696420-     msg_2 db 10, "Invalid input. Please enter valid number.", 10, 0
    22 0000005B 696E7075742E20506C-
    22 00000064 6561736520656E7465-
    22 0000006D 722076616C6964206E-
    22 00000076 756D6265722E0A00   
    23 0000007E 0A546865736520696E-     msg_3 db 10, "These input have been tested and they are sides of a valid triangle.", 10, 0
    23 00000087 707574206861766520-
    23 00000090 6265656E2074657374-
    23 00000099 656420616E64207468-
    23 000000A2 657920617265207369-
    23 000000AB 646573206F66206120-
    23 000000B4 76616C696420747269-
    23 000000BD 616E676C652E0A00   
    24 000000C5 0A546865204875726F-     msg_4 db 10, "The Huron formula will be applied to find the area."
    24 000000CE 6E20666F726D756C61-
    24 000000D7 2077696C6C20626520-
    24 000000E0 6170706C6965642074-
    24 000000E9 6F2066696E64207468-
    24 000000F2 6520617265612E     
    25 000000F9 0A5468652061726561-     msg_5 db 10, "The area is %.4lf sq units. This number will be returned to the caller module.", 10, 0
    25 00000102 20697320252E346C66-
    25 0000010B 20737120756E697473-
    25 00000114 2E2054686973206E75-
    25 0000011D 6D6265722077696C6C-
    25 00000126 206265207265747572-
    25 0000012F 6E656420746F207468-
    25 00000138 652063616C6C657220-
    25 00000141 6D6F64756C652E0A00 
    26                                  
    27                                  segment .bss
    28                                  ;declared empty arrays
    29                                  
    30                                  align 64
    31 00000000 <res 00000340>          backup_storage_area resb 832
    32                                  
    33 00000340 <res 00000020>          side1 resb 32   ; Reserving 1 byte for double input
    34 00000360 <res 00000020>          side2 resb 32
    35 00000380 <res 00000020>          side3 resb 32
    36                                  
    37                                  segment .text
    38                                  
    39                                  manager:
    40                                  
    41                                  ; backup GPRs
    42                                  ;backup GPRs
    43 00000000 55                      push rbp
    44 00000001 4889E5                  mov rbp, rsp
    45 00000004 53                      push rbx
    46 00000005 51                      push rcx
    47 00000006 52                      push rdx
    48 00000007 57                      push rdi
    49 00000008 56                      push rsi
    50 00000009 4150                    push r8
    51 0000000B 4151                    push r9
    52 0000000D 4152                    push r10
    53 0000000F 4153                    push r11
    54 00000011 4154                    push r12
    55 00000013 4155                    push r13
    56 00000015 4156                    push r14
    57 00000017 4157                    push r15
    58 00000019 9C                      pushf
    59                                  
    60                                  ; Backup other registers
    61 0000001A B807000000              mov rax, 7
    62 0000001F BA00000000              mov rdx, 0
    63 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
    64                                  
    65                                  ask_input:
    66 0000002C B800000000              mov rax, 0
    67 00000031 48BF-                   mov rdi, prompt_for_sides
    67 00000033 [0000000000000000] 
    68 0000003B E8(00000000)            call printf
    69                                  
    70                                  ; Read three numbers as strings
    71 00000040 48BF-                   mov rdi, scan_format  ; "%s %s %s"
    71 00000042 [3900000000000000] 
    72 0000004A 48BE-                   mov rsi, side1        ; First buffer
    72 0000004C [4003000000000000] 
    73 00000054 48BA-                   mov rdx, side2        ; Second buffer
    73 00000056 [6003000000000000] 
    74 0000005E 48B9-                   mov rcx, side3        ; Third buffer
    74 00000060 [8003000000000000] 
    75 00000068 E8(00000000)            call scanf
    76                                  
    77                                  ; Validate and convert side1
    78 0000006D 48BF-                   mov rdi, side1
    78 0000006F [4003000000000000] 
    79 00000077 E8(00000000)            call isfloat
    80 0000007C 4883F800                cmp rax, 0
    81 00000080 7468                    je invalid_input
    82 00000082 48BF-                   mov rdi, side1
    82 00000084 [4003000000000000] 
    83 0000008C E8(00000000)            call atof
    84 00000091 F2440F10E0              movsd xmm12, xmm0
    85                                  
    86                                  ; Validate and convert side2
    87 00000096 48BF-                   mov rdi, side2
    87 00000098 [6003000000000000] 
    88 000000A0 E8(00000000)            call isfloat
    89 000000A5 4883F800                cmp rax, 0
    90 000000A9 743F                    je invalid_input
    91 000000AB 48BF-                   mov rdi, side2
    91 000000AD [6003000000000000] 
    92 000000B5 E8(00000000)            call atof
    93 000000BA F2440F10E8              movsd xmm13, xmm0
    94                                  
    95                                  ; Validate and convert side3
    96 000000BF 48BF-                   mov rdi, side3
    96 000000C1 [8003000000000000] 
    97 000000C9 E8(00000000)            call isfloat
    98 000000CE 4883F800                cmp rax, 0
    99 000000D2 7416                    je invalid_input
   100 000000D4 48BF-                   mov rdi, side3
   100 000000D6 [8003000000000000] 
   101 000000DE E8(00000000)            call atof
   102 000000E3 F2440F10E0              movsd xmm12, xmm0
   103                                  
   104 000000E8 EB19                    jmp next
   105                                  
   106                                  invalid_input:
   107 000000EA B800000000              mov rax, 0
   108 000000EF 48BF-                   mov rdi, msg_2
   108 000000F1 [5200000000000000] 
   109 000000F9 E8(00000000)            call printf
   110 000000FE E929FFFFFF              jmp ask_input
   111                                  
   112                                  next:
   113                                  
   114 00000103 F2410F10C4              movsd xmm0, xmm12
   115 00000108 F2410F10CD              movsd xmm1, xmm13
   116 0000010D F2410F10D6              movsd xmm2, xmm14
   117 00000112 E8(00000000)            call istriangle
   118 00000117 4883F800                cmp rax, 0
   119 0000011B 74CD                    je invalid_input
   120                                  
   121 0000011D B800000000              mov rax, 0
   122 00000122 48BF-                   mov rdi, msg_3
   122 00000124 [7E00000000000000] 
   123 0000012C E8(00000000)            call printf
   124                                  
   125 00000131 B800000000              mov rax, 0
   126 00000136 48BF-                   mov rdi, msg_4
   126 00000138 [C500000000000000] 
   127 00000140 E8(00000000)            call printf
   128                                  
   129 00000145 B803000000              mov rax, 3
   130 0000014A F20F100425-             movsd xmm0, [side1]
   130 0000014F [40030000]         
   131 00000153 F20F100C25-             movsd xmm1, [side2]
   131 00000158 [60030000]         
   132 0000015C F20F101425-             movsd xmm2, [side3]
   132 00000161 [80030000]         
   133 00000165 E8(00000000)            call huron
   134                                  
   135 0000016A F2440F10F8              movsd xmm15, xmm0
   136                                  
   137 0000016F B801000000              mov rax, 1
   138 00000174 48BF-                   mov rdi, msg_5
   138 00000176 [F900000000000000] 
   139 0000017E F2410F10C7              movsd xmm0, xmm15
   140 00000183 E8(00000000)            call printf
   141                                  
   142 00000188 B800000000              mov rax, 0
   143 0000018D 6A00                    push qword 0
   144 0000018F F2440F113C24            movsd [rsp], xmm15
   145                                  
   146                                  ; Restoring registers
   147 00000195 B807000000              mov rax, 7
   148 0000019A B800000000              mov rax, 0
   149 0000019F 0FAE2C25[00000000]      xrstor [backup_storage_area]
   150                                  
   151                                  ; Sending the area to main
   152 000001A7 F20F100424              movsd xmm0, [rsp]   ; Passing rsp to xmm0, xmm0 will be returned
   153 000001AC 58                      pop rax
   154                                  
   155                                  ;Restore the GPRs
   156 000001AD 9D                      popf
   157 000001AE 415F                    pop r15
   158 000001B0 415E                    pop r14
   159 000001B2 415D                    pop r13
   160 000001B4 415C                    pop r12
   161 000001B6 415B                    pop r11
   162 000001B8 415A                    pop r10
   163 000001BA 4159                    pop r9
   164 000001BC 4158                    pop r8
   165 000001BE 5E                      pop rsi
   166 000001BF 5F                      pop rdi
   167 000001C0 5A                      pop rdx
   168 000001C1 59                      pop rcx
   169 000001C2 5B                      pop rbx
   170 000001C3 5D                      pop rbp
   171 000001C4 C3                      ret
   172                                  
   173                                  
   174                                  
