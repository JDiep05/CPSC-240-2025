     1                                  ;declaration
     2                                  
     3                                  extern printf
     4                                  
     5                                  extern atof
     6                                  
     7                                  extern scanf
     8                                  
     9                                  extern isfloat
    10                                  
    11                                  extern istriangle
    12                                  
    13                                  extern huron
    14                                  
    15                                  global manager
    16                                  
    17                                  segment .data
    18 00000000 0A506C656173652065-     prompt_for_sides db 10, "Please enter the lengths of three sides of a triangle: ", 0
    18 00000009 6E7465722074686520-
    18 00000012 6C656E67746873206F-
    18 0000001B 662074687265652073-
    18 00000024 69646573206F662061-
    18 0000002D 20747269616E676C65-
    18 00000036 3A2000             
    19 00000039 257320257320257300      string_format db "%s %s %s", 0
    20 00000042 256620256620256600      sides_format db "%f %f %f", 0
    21 0000004B 0A256C6600              float_format db 10, "%lf", 0
    22 00000050 0A5468616E6B20796F-     msg_1 db 10, "Thank you", 10, 
    22 00000059 750A               
    23 0000005B 0A4572726F7220696E-     msg_2 db 10, "Error input try again", 10, 0
    23 00000064 707574207472792061-
    23 0000006D 6761696E0A00       
    24 00000073 0A546865736520696E-     msg_3 db 10, "These input have been tested and they are sides of a valid triangle.", 10, 0
    24 0000007C 707574206861766520-
    24 00000085 6265656E2074657374-
    24 0000008E 656420616E64207468-
    24 00000097 657920617265207369-
    24 000000A0 646573206F66206120-
    24 000000A9 76616C696420747269-
    24 000000B2 616E676C652E0A00   
    25 000000BA 0A546865204875726F-     msg_4 db 10, "The Huron formula will be applied to find the area.", 10, 0
    25 000000C3 6E20666F726D756C61-
    25 000000CC 2077696C6C20626520-
    25 000000D5 6170706C6965642074-
    25 000000DE 6F2066696E64207468-
    25 000000E7 6520617265612E0A00 
    26 000000F0 0A5468652061726561-     msg_5 db 10, "The area is %.4lf sq units. This number will be returned to the caller module.", 10, 0
    26 000000F9 20697320252E346C66-
    26 00000102 20737120756E697473-
    26 0000010B 2E2054686973206E75-
    26 00000114 6D6265722077696C6C-
    26 0000011D 206265207265747572-
    26 00000126 6E656420746F207468-
    26 0000012F 652063616C6C657220-
    26 00000138 6D6F64756C652E0A00 
    27                                  
    28                                  segment .bss
    29                                  ;declared empty arrays
    30                                  
    31                                  align 64
    32 00000000 <res 00000340>          backup_storage_area resb 832
    33                                  
    34 00000340 <res 00000020>          side1 resb 32   ; Reserving 1 byte for double input
    35 00000360 <res 00000020>          side2 resb 32
    36 00000380 <res 00000020>          side3 resb 32
    37                                  
    38                                  segment .text
    39                                  
    40                                  manager:
    41                                  
    42                                  ; Backup GPRs and other registers
    43 00000000 55                      push rbp
    44 00000001 4889E5                  mov rbp, rsp
    45 00000004 53                      push rbx
    46 00000005 51                      push rcx
    47 00000006 52                      push rdx
    48 00000007 57                      push rdi
    49 00000008 56                      push rsi
    50 00000009 4150                    push r8
    51 0000000B 4151                    push r9
    52 0000000D 4152                    push r10
    53 0000000F 4153                    push r11
    54 00000011 4154                    push r12
    55 00000013 4155                    push r13
    56 00000015 4156                    push r14
    57 00000017 4157                    push r15
    58 00000019 9C                      pushf
    59                                  
    60 0000001A B807000000              mov rax, 7
    61 0000001F BA00000000              mov rdx, 0
    62 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
    63                                  
    64                                  ask_input:
    65 0000002C B800000000              mov rax, 0
    66 00000031 48BF-                   mov rdi, prompt_for_sides
    66 00000033 [0000000000000000] 
    67 0000003B E8(00000000)            call printf
    68                                  
    69                                  ; Read three numbers as strings
    70 00000040 48BF-                   mov rdi, string_format  ; "%s %s %s"
    70 00000042 [3900000000000000] 
    71 0000004A 48BE-                   mov rsi, side1        ; First buffer
    71 0000004C [4003000000000000] 
    72 00000054 48BA-                   mov rdx, side2        ; Second buffer
    72 00000056 [6003000000000000] 
    73 0000005E 48B9-                   mov rcx, side3        ; Third buffer
    73 00000060 [8003000000000000] 
    74 00000068 E8(00000000)            call scanf
    75                                  
    76                                  ; Validate and convert side1
    77 0000006D 48BF-                   mov rdi, side1
    77 0000006F [4003000000000000] 
    78 00000077 E8(00000000)            call isfloat
    79 0000007C 4883F800                cmp rax, 0
    80 00000080 0F8482000000            je invalid_input
    81 00000086 48BF-                   mov rdi, side1
    81 00000088 [4003000000000000] 
    82 00000090 E8(00000000)            call atof
    83 00000095 F2440F10E0              movsd xmm12, xmm0
    84                                  
    85                                  ; Validate and convert side2
    86 0000009A 48BF-                   mov rdi, side2
    86 0000009C [6003000000000000] 
    87 000000A4 E8(00000000)            call isfloat
    88 000000A9 4883F800                cmp rax, 0
    89 000000AD 7459                    je invalid_input
    90 000000AF 48BF-                   mov rdi, side2
    90 000000B1 [6003000000000000] 
    91 000000B9 E8(00000000)            call atof
    92 000000BE F2440F10E8              movsd xmm13, xmm0
    93                                  
    94                                  ; Validate and convert side3
    95 000000C3 48BF-                   mov rdi, side3
    95 000000C5 [8003000000000000] 
    96 000000CD E8(00000000)            call isfloat
    97 000000D2 4883F800                cmp rax, 0
    98 000000D6 7430                    je invalid_input
    99 000000D8 48BF-                   mov rdi, side3
    99 000000DA [8003000000000000] 
   100 000000E2 E8(00000000)            call atof
   101 000000E7 F2440F10F0              movsd xmm14, xmm0
   102                                  
   103                                  ; Call istriangle to validate the sides
   104 000000EC F2410F10C4              movsd xmm0, xmm12
   105 000000F1 F2410F10CD              movsd xmm1, xmm13
   106 000000F6 F2410F10D6              movsd xmm2, xmm14
   107 000000FB E8(00000000)            call istriangle
   108 00000100 4883F800                cmp rax, 0
   109 00000104 7402                    je invalid_input
   110                                  
   111 00000106 EB19                    jmp next
   112                                  
   113                                  invalid_input:
   114 00000108 B800000000              mov rax, 0
   115 0000010D 48BF-                   mov rdi, msg_2
   115 0000010F [5B00000000000000] 
   116 00000117 E8(00000000)            call printf
   117 0000011C E90BFFFFFF              jmp ask_input
   118                                  
   119                                  next:
   120 00000121 B800000000              mov rax, 0
   121 00000126 48BF-                   mov rdi, msg_3
   121 00000128 [7300000000000000] 
   122 00000130 E8(00000000)            call printf
   123                                  
   124 00000135 B800000000              mov rax, 0
   125 0000013A 48BF-                   mov rdi, msg_4
   125 0000013C [BA00000000000000] 
   126 00000144 E8(00000000)            call printf
   127                                  
   128                                  ; Call huron to calculate the area
   129 00000149 F2410F10C4              movsd xmm0, xmm12
   130 0000014E F2410F10CD              movsd xmm1, xmm13
   131 00000153 F2410F10D6              movsd xmm2, xmm14
   132 00000158 E8(00000000)            call huron
   133 0000015D F2440F10F8              movsd xmm15, xmm0
   134                                  
   135                                  ; Print the area
   136 00000162 B801000000              mov rax, 1
   137 00000167 48BF-                   mov rdi, msg_5
   137 00000169 [F000000000000000] 
   138 00000171 F2410F10C7              movsd xmm0, xmm15
   139 00000176 E8(00000000)            call printf
   140                                  
   141                                  ; Return the area to the caller
   142 0000017B B800000000              mov rax, 0
   143 00000180 6A00                    push qword 0
   144 00000182 F2440F113C24            movsd [rsp], xmm15
   145                                  
   146                                  ; Restore registers
   147 00000188 B807000000              mov rax, 7
   148 0000018D B800000000              mov rax, 0
   149 00000192 0FAE2C25[00000000]      xrstor [backup_storage_area]
   150                                  
   151                                  ; Return the area in xmm0
   152 0000019A F20F100424              movsd xmm0, [rsp]
   153 0000019F 58                      pop rax
   154                                  
   155                                  ; Restore GPRs
   156 000001A0 9D                      popf
   157 000001A1 415F                    pop r15
   158 000001A3 415E                    pop r14
   159 000001A5 415D                    pop r13
   160 000001A7 415C                    pop r12
   161 000001A9 415B                    pop r11
   162 000001AB 415A                    pop r10
   163 000001AD 4159                    pop r9
   164 000001AF 4158                    pop r8
   165 000001B1 5E                      pop rsi
   166 000001B2 5F                      pop rdi
   167 000001B3 5A                      pop rdx
   168 000001B4 59                      pop rcx
   169 000001B5 5B                      pop rbx
   170 000001B6 5D                      pop rbp
   171 000001B7 C3                      ret
